
udemy_course_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002490  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800259c  0800259c  0001259c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025d4  080025d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025d4  080025d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025d4  080025d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025d8  080025d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  2000000c  080025e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080025e8  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfdc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec4  00000000  00000000  0002d011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c0  00000000  00000000  00030738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e98a  00000000  00000000  000479f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008547c  00000000  00000000  00056382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db7fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003448  00000000  00000000  000db850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002584 	.word	0x08002584

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002584 	.word	0x08002584

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fac6 	bl	80006e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80b 	bl	800016e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f93a 	bl	80003d0 <MX_GPIO_Init>
  MX_I2C2_Init();
 800015c:	f000 f868 	bl	8000230 <MX_I2C2_Init>
  MX_RTC_Init();
 8000160:	f000 f894 	bl	800028c <MX_RTC_Init>
  MX_SPI2_Init();
 8000164:	f000 f8dc 	bl	8000320 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8000168:	f000 f910 	bl	800038c <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016c:	e7fe      	b.n	800016c <main+0x20>

0800016e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b094      	sub	sp, #80	; 0x50
 8000172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000178:	2228      	movs	r2, #40	; 0x28
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f002 f9f9 	bl	8002574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000182:	f107 0314 	add.w	r3, r7, #20
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800019e:	2309      	movs	r3, #9
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a8:	2300      	movs	r3, #0
 80001aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80001be:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80001c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 ffaf 	bl	800112c <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80001d4:	f000 f92a 	bl	800042c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	2101      	movs	r1, #1
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fa1b 	bl	8001630 <HAL_RCC_ClockConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000200:	f000 f914 	bl	800042c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000204:	2311      	movs	r3, #17
 8000206:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800020c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800020e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000212:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fba2 	bl	8001960 <HAL_RCCEx_PeriphCLKConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000222:	f000 f903 	bl	800042c <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3750      	adds	r7, #80	; 0x50
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <MX_I2C2_Init+0x50>)
 8000236:	4a13      	ldr	r2, [pc, #76]	; (8000284 <MX_I2C2_Init+0x54>)
 8000238:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <MX_I2C2_Init+0x50>)
 800023c:	4a12      	ldr	r2, [pc, #72]	; (8000288 <MX_I2C2_Init+0x58>)
 800023e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <MX_I2C2_Init+0x50>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <MX_I2C2_Init+0x50>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <MX_I2C2_Init+0x50>)
 800024e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000252:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000254:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <MX_I2C2_Init+0x50>)
 8000256:	2200      	movs	r2, #0
 8000258:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <MX_I2C2_Init+0x50>)
 800025c:	2200      	movs	r2, #0
 800025e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <MX_I2C2_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <MX_I2C2_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800026c:	4804      	ldr	r0, [pc, #16]	; (8000280 <MX_I2C2_Init+0x50>)
 800026e:	f000 fd01 	bl	8000c74 <HAL_I2C_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000278:	f000 f8d8 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000028 	.word	0x20000028
 8000284:	40005800 	.word	0x40005800
 8000288:	000186a0 	.word	0x000186a0

0800028c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2100      	movs	r1, #0
 8000296:	460a      	mov	r2, r1
 8000298:	801a      	strh	r2, [r3, #0]
 800029a:	460a      	mov	r2, r1
 800029c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800029e:	2300      	movs	r3, #0
 80002a0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002a2:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <MX_RTC_Init+0x8c>)
 80002a4:	4a1d      	ldr	r2, [pc, #116]	; (800031c <MX_RTC_Init+0x90>)
 80002a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <MX_RTC_Init+0x8c>)
 80002aa:	f04f 32ff 	mov.w	r2, #4294967295
 80002ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80002b0:	4b19      	ldr	r3, [pc, #100]	; (8000318 <MX_RTC_Init+0x8c>)
 80002b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002b6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002b8:	4817      	ldr	r0, [pc, #92]	; (8000318 <MX_RTC_Init+0x8c>)
 80002ba:	f001 fcc5 	bl	8001c48 <HAL_RTC_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80002c4:	f000 f8b2 	bl	800042c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2201      	movs	r2, #1
 80002d8:	4619      	mov	r1, r3
 80002da:	480f      	ldr	r0, [pc, #60]	; (8000318 <MX_RTC_Init+0x8c>)
 80002dc:	f001 fd4a 	bl	8001d74 <HAL_RTC_SetTime>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80002e6:	f000 f8a1 	bl	800042c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80002ea:	2301      	movs	r3, #1
 80002ec:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80002ee:	2301      	movs	r3, #1
 80002f0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80002fa:	463b      	mov	r3, r7
 80002fc:	2201      	movs	r2, #1
 80002fe:	4619      	mov	r1, r3
 8000300:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_RTC_Init+0x8c>)
 8000302:	f001 fdcf 	bl	8001ea4 <HAL_RTC_SetDate>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800030c:	f000 f88e 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	2000007c 	.word	0x2000007c
 800031c:	40002800 	.word	0x40002800

08000320 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_SPI2_Init+0x64>)
 8000326:	4a18      	ldr	r2, [pc, #96]	; (8000388 <MX_SPI2_Init+0x68>)
 8000328:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800032a:	4b16      	ldr	r3, [pc, #88]	; (8000384 <MX_SPI2_Init+0x64>)
 800032c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000330:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_SPI2_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_SPI2_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_SPI2_Init+0x64>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_SPI2_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_SPI2_Init+0x64>)
 800034c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000350:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_SPI2_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_SPI2_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_SPI2_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <MX_SPI2_Init+0x64>)
 8000366:	2200      	movs	r2, #0
 8000368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_SPI2_Init+0x64>)
 800036c:	220a      	movs	r2, #10
 800036e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_SPI2_Init+0x64>)
 8000372:	f001 fff7 	bl	8002364 <HAL_SPI_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800037c:	f000 f856 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000090 	.word	0x20000090
 8000388:	40003800 	.word	0x40003800

0800038c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <MX_USB_PCD_Init+0x3c>)
 8000392:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <MX_USB_PCD_Init+0x40>)
 8000394:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_USB_PCD_Init+0x3c>)
 8000398:	2208      	movs	r2, #8
 800039a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <MX_USB_PCD_Init+0x3c>)
 800039e:	2202      	movs	r2, #2
 80003a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_USB_PCD_Init+0x3c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <MX_USB_PCD_Init+0x3c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_USB_PCD_Init+0x3c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <MX_USB_PCD_Init+0x3c>)
 80003b6:	f000 fda1 	bl	8000efc <HAL_PCD_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80003c0:	f000 f834 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200000e8 	.word	0x200000e8
 80003cc:	40005c00 	.word	0x40005c00

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_GPIO_Init+0x58>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a13      	ldr	r2, [pc, #76]	; (8000428 <MX_GPIO_Init+0x58>)
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_GPIO_Init+0x58>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0320 	and.w	r3, r3, #32
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_GPIO_Init+0x58>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a0d      	ldr	r2, [pc, #52]	; (8000428 <MX_GPIO_Init+0x58>)
 80003f4:	f043 0308 	orr.w	r3, r3, #8
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_GPIO_Init+0x58>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_GPIO_Init+0x58>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a07      	ldr	r2, [pc, #28]	; (8000428 <MX_GPIO_Init+0x58>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <MX_GPIO_Init+0x58>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0304 	and.w	r3, r3, #4
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	e7fe      	b.n	8000434 <Error_Handler+0x8>
	...

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a14      	ldr	r2, [pc, #80]	; (8000494 <HAL_MspInit+0x5c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_MspInit+0x5c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_MspInit+0x60>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_MspInit+0x60>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a16      	ldr	r2, [pc, #88]	; (8000510 <HAL_I2C_MspInit+0x74>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d124      	bne.n	8000506 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_I2C_MspInit+0x78>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a14      	ldr	r2, [pc, #80]	; (8000514 <HAL_I2C_MspInit+0x78>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <HAL_I2C_MspInit+0x78>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004da:	2312      	movs	r3, #18
 80004dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004de:	2303      	movs	r3, #3
 80004e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	4619      	mov	r1, r3
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <HAL_I2C_MspInit+0x7c>)
 80004ea:	f000 fa3f 	bl	800096c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_I2C_MspInit+0x78>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <HAL_I2C_MspInit+0x78>)
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_I2C_MspInit+0x78>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40005800 	.word	0x40005800
 8000514:	40021000 	.word	0x40021000
 8000518:	40010c00 	.word	0x40010c00

0800051c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <HAL_RTC_MspInit+0x3c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d110      	bne.n	8000550 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800052e:	f000 fdf1 	bl	8001114 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_RTC_MspInit+0x40>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <HAL_RTC_MspInit+0x40>)
 8000538:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <HAL_RTC_MspInit+0x40>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_RTC_MspInit+0x44>)
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40002800 	.word	0x40002800
 800055c:	40021000 	.word	0x40021000
 8000560:	4242043c 	.word	0x4242043c

08000564 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <HAL_SPI_MspInit+0x8c>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d131      	bne.n	80005e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <HAL_SPI_MspInit+0x90>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <HAL_SPI_MspInit+0x90>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	61d3      	str	r3, [r2, #28]
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <HAL_SPI_MspInit+0x90>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_SPI_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <HAL_SPI_MspInit+0x90>)
 80005a2:	f043 0308 	orr.w	r3, r3, #8
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_SPI_MspInit+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0308 	and.w	r3, r3, #8
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80005b4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80005b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	4619      	mov	r1, r3
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <HAL_SPI_MspInit+0x94>)
 80005ca:	f000 f9cf 	bl	800096c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4619      	mov	r1, r3
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <HAL_SPI_MspInit+0x94>)
 80005e4:	f000 f9c2 	bl	800096c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40003800 	.word	0x40003800
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010c00 	.word	0x40010c00

080005fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a09      	ldr	r2, [pc, #36]	; (8000630 <HAL_PCD_MspInit+0x34>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d10b      	bne.n	8000626 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_PCD_MspInit+0x38>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <HAL_PCD_MspInit+0x38>)
 8000614:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_PCD_MspInit+0x38>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40005c00 	.word	0x40005c00
 8000634:	40021000 	.word	0x40021000

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067e:	f000 f875 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}

08000686 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
	...

08000694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000696:	490d      	ldr	r1, [pc, #52]	; (80006cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006ac:	4c0a      	ldr	r4, [pc, #40]	; (80006d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ba:	f7ff ffe4 	bl	8000686 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006be:	f001 ff35 	bl	800252c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fd43 	bl	800014c <main>
  bx lr
 80006c6:	4770      	bx	lr
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d0:	080025dc 	.word	0x080025dc
  ldr r2, =_sbss
 80006d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d8:	200003d8 	.word	0x200003d8

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>
	...

080006e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_Init+0x28>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_Init+0x28>)
 80006ea:	f043 0310 	orr.w	r3, r3, #16
 80006ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f0:	2003      	movs	r0, #3
 80006f2:	f000 f907 	bl	8000904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f6:	200f      	movs	r0, #15
 80006f8:	f000 f808 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fc:	f7ff fe9c 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_InitTick+0x54>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x58>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f911 	bl	8000952 <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 f8e7 	bl	800091a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_InitTick+0x5c>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000000 	.word	0x20000000
 8000764:	20000008 	.word	0x20000008
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a03      	ldr	r2, [pc, #12]	; (800078c <HAL_IncTick+0x20>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000008 	.word	0x20000008
 800078c:	200003d4 	.word	0x200003d4

08000790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	200003d4 	.word	0x200003d4

080007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	db0a      	blt.n	8000832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	490c      	ldr	r1, [pc, #48]	; (8000854 <__NVIC_SetPriority+0x4c>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	440b      	add	r3, r1
 800082c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000830:	e00a      	b.n	8000848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4908      	ldr	r1, [pc, #32]	; (8000858 <__NVIC_SetPriority+0x50>)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	3b04      	subs	r3, #4
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	440b      	add	r3, r1
 8000846:	761a      	strb	r2, [r3, #24]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f1c3 0307 	rsb	r3, r3, #7
 8000876:	2b04      	cmp	r3, #4
 8000878:	bf28      	it	cs
 800087a:	2304      	movcs	r3, #4
 800087c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3304      	adds	r3, #4
 8000882:	2b06      	cmp	r3, #6
 8000884:	d902      	bls.n	800088c <NVIC_EncodePriority+0x30>
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3b03      	subs	r3, #3
 800088a:	e000      	b.n	800088e <NVIC_EncodePriority+0x32>
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	f04f 32ff 	mov.w	r2, #4294967295
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43da      	mvns	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	401a      	ands	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a4:	f04f 31ff 	mov.w	r1, #4294967295
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa01 f303 	lsl.w	r3, r1, r3
 80008ae:	43d9      	mvns	r1, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	4313      	orrs	r3, r2
         );
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	; 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d0:	d301      	bcc.n	80008d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00f      	b.n	80008f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <SysTick_Config+0x40>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008de:	210f      	movs	r1, #15
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f7ff ff90 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <SysTick_Config+0x40>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <SysTick_Config+0x40>)
 80008f0:	2207      	movs	r2, #7
 80008f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	e000e010 	.word	0xe000e010

08000904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff49 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
 8000926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800092c:	f7ff ff5e 	bl	80007ec <__NVIC_GetPriorityGrouping>
 8000930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff ff90 	bl	800085c <NVIC_EncodePriority>
 800093c:	4602      	mov	r2, r0
 800093e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff5f 	bl	8000808 <__NVIC_SetPriority>
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffb0 	bl	80008c0 <SysTick_Config>
 8000960:	4603      	mov	r3, r0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800096c:	b480      	push	{r7}
 800096e:	b08b      	sub	sp, #44	; 0x2c
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097e:	e169      	b.n	8000c54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000980:	2201      	movs	r2, #1
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	69fa      	ldr	r2, [r7, #28]
 8000990:	4013      	ands	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	429a      	cmp	r2, r3
 800099a:	f040 8158 	bne.w	8000c4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	4a9a      	ldr	r2, [pc, #616]	; (8000c0c <HAL_GPIO_Init+0x2a0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d05e      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009a8:	4a98      	ldr	r2, [pc, #608]	; (8000c0c <HAL_GPIO_Init+0x2a0>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d875      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009ae:	4a98      	ldr	r2, [pc, #608]	; (8000c10 <HAL_GPIO_Init+0x2a4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d058      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009b4:	4a96      	ldr	r2, [pc, #600]	; (8000c10 <HAL_GPIO_Init+0x2a4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d86f      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009ba:	4a96      	ldr	r2, [pc, #600]	; (8000c14 <HAL_GPIO_Init+0x2a8>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d052      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009c0:	4a94      	ldr	r2, [pc, #592]	; (8000c14 <HAL_GPIO_Init+0x2a8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d869      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009c6:	4a94      	ldr	r2, [pc, #592]	; (8000c18 <HAL_GPIO_Init+0x2ac>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d04c      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009cc:	4a92      	ldr	r2, [pc, #584]	; (8000c18 <HAL_GPIO_Init+0x2ac>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d863      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009d2:	4a92      	ldr	r2, [pc, #584]	; (8000c1c <HAL_GPIO_Init+0x2b0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d046      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
 80009d8:	4a90      	ldr	r2, [pc, #576]	; (8000c1c <HAL_GPIO_Init+0x2b0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d85d      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009de:	2b12      	cmp	r3, #18
 80009e0:	d82a      	bhi.n	8000a38 <HAL_GPIO_Init+0xcc>
 80009e2:	2b12      	cmp	r3, #18
 80009e4:	d859      	bhi.n	8000a9a <HAL_GPIO_Init+0x12e>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <HAL_GPIO_Init+0x80>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a67 	.word	0x08000a67
 80009f0:	08000a41 	.word	0x08000a41
 80009f4:	08000a53 	.word	0x08000a53
 80009f8:	08000a95 	.word	0x08000a95
 80009fc:	08000a9b 	.word	0x08000a9b
 8000a00:	08000a9b 	.word	0x08000a9b
 8000a04:	08000a9b 	.word	0x08000a9b
 8000a08:	08000a9b 	.word	0x08000a9b
 8000a0c:	08000a9b 	.word	0x08000a9b
 8000a10:	08000a9b 	.word	0x08000a9b
 8000a14:	08000a9b 	.word	0x08000a9b
 8000a18:	08000a9b 	.word	0x08000a9b
 8000a1c:	08000a9b 	.word	0x08000a9b
 8000a20:	08000a9b 	.word	0x08000a9b
 8000a24:	08000a9b 	.word	0x08000a9b
 8000a28:	08000a9b 	.word	0x08000a9b
 8000a2c:	08000a9b 	.word	0x08000a9b
 8000a30:	08000a49 	.word	0x08000a49
 8000a34:	08000a5d 	.word	0x08000a5d
 8000a38:	4a79      	ldr	r2, [pc, #484]	; (8000c20 <HAL_GPIO_Init+0x2b4>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d013      	beq.n	8000a66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a3e:	e02c      	b.n	8000a9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e029      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e024      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	3308      	adds	r3, #8
 8000a58:	623b      	str	r3, [r7, #32]
          break;
 8000a5a:	e01f      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	330c      	adds	r3, #12
 8000a62:	623b      	str	r3, [r7, #32]
          break;
 8000a64:	e01a      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d102      	bne.n	8000a74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	623b      	str	r3, [r7, #32]
          break;
 8000a72:	e013      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d105      	bne.n	8000a88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	611a      	str	r2, [r3, #16]
          break;
 8000a86:	e009      	b.n	8000a9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	69fa      	ldr	r2, [r7, #28]
 8000a90:	615a      	str	r2, [r3, #20]
          break;
 8000a92:	e003      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
          break;
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x130>
          break;
 8000a9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2bff      	cmp	r3, #255	; 0xff
 8000aa0:	d801      	bhi.n	8000aa6 <HAL_GPIO_Init+0x13a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	e001      	b.n	8000aaa <HAL_GPIO_Init+0x13e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	2bff      	cmp	r3, #255	; 0xff
 8000ab0:	d802      	bhi.n	8000ab8 <HAL_GPIO_Init+0x14c>
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	e002      	b.n	8000abe <HAL_GPIO_Init+0x152>
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	3b08      	subs	r3, #8
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	401a      	ands	r2, r3
 8000ad0:	6a39      	ldr	r1, [r7, #32]
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 80b1 	beq.w	8000c4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aec:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <HAL_GPIO_Init+0x2b8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a4c      	ldr	r2, [pc, #304]	; (8000c24 <HAL_GPIO_Init+0x2b8>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b4a      	ldr	r3, [pc, #296]	; (8000c24 <HAL_GPIO_Init+0x2b8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b04:	4a48      	ldr	r2, [pc, #288]	; (8000c28 <HAL_GPIO_Init+0x2bc>)
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a40      	ldr	r2, [pc, #256]	; (8000c2c <HAL_GPIO_Init+0x2c0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d013      	beq.n	8000b58 <HAL_GPIO_Init+0x1ec>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a3f      	ldr	r2, [pc, #252]	; (8000c30 <HAL_GPIO_Init+0x2c4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00d      	beq.n	8000b54 <HAL_GPIO_Init+0x1e8>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a3e      	ldr	r2, [pc, #248]	; (8000c34 <HAL_GPIO_Init+0x2c8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x1e4>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a3d      	ldr	r2, [pc, #244]	; (8000c38 <HAL_GPIO_Init+0x2cc>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <HAL_GPIO_Init+0x1e0>
 8000b48:	2303      	movs	r3, #3
 8000b4a:	e006      	b.n	8000b5a <HAL_GPIO_Init+0x1ee>
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	e004      	b.n	8000b5a <HAL_GPIO_Init+0x1ee>
 8000b50:	2302      	movs	r3, #2
 8000b52:	e002      	b.n	8000b5a <HAL_GPIO_Init+0x1ee>
 8000b54:	2301      	movs	r3, #1
 8000b56:	e000      	b.n	8000b5a <HAL_GPIO_Init+0x1ee>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b5c:	f002 0203 	and.w	r2, r2, #3
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	4093      	lsls	r3, r2
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b6a:	492f      	ldr	r1, [pc, #188]	; (8000c28 <HAL_GPIO_Init+0x2bc>)
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	3302      	adds	r3, #2
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b84:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	492c      	ldr	r1, [pc, #176]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	600b      	str	r3, [r1, #0]
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4928      	ldr	r1, [pc, #160]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bac:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	4922      	ldr	r1, [pc, #136]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	604b      	str	r3, [r1, #4]
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	491e      	ldr	r1, [pc, #120]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	4918      	ldr	r1, [pc, #96]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	608b      	str	r3, [r1, #8]
 8000be0:	e006      	b.n	8000bf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4914      	ldr	r1, [pc, #80]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d021      	beq.n	8000c40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	490e      	ldr	r1, [pc, #56]	; (8000c3c <HAL_GPIO_Init+0x2d0>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	60cb      	str	r3, [r1, #12]
 8000c08:	e021      	b.n	8000c4e <HAL_GPIO_Init+0x2e2>
 8000c0a:	bf00      	nop
 8000c0c:	10320000 	.word	0x10320000
 8000c10:	10310000 	.word	0x10310000
 8000c14:	10220000 	.word	0x10220000
 8000c18:	10210000 	.word	0x10210000
 8000c1c:	10120000 	.word	0x10120000
 8000c20:	10110000 	.word	0x10110000
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010000 	.word	0x40010000
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40010c00 	.word	0x40010c00
 8000c34:	40011000 	.word	0x40011000
 8000c38:	40011400 	.word	0x40011400
 8000c3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_GPIO_Init+0x304>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4909      	ldr	r1, [pc, #36]	; (8000c70 <HAL_GPIO_Init+0x304>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f47f ae8e 	bne.w	8000980 <HAL_GPIO_Init+0x14>
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	372c      	adds	r7, #44	; 0x2c
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40010400 	.word	0x40010400

08000c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e12b      	b.n	8000ede <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d106      	bne.n	8000ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fbfe 	bl	800049c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2224      	movs	r2, #36	; 0x24
 8000ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0201 	bic.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cd8:	f000 fdfc 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 8000cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	4a81      	ldr	r2, [pc, #516]	; (8000ee8 <HAL_I2C_Init+0x274>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d807      	bhi.n	8000cf8 <HAL_I2C_Init+0x84>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4a80      	ldr	r2, [pc, #512]	; (8000eec <HAL_I2C_Init+0x278>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	bf94      	ite	ls
 8000cf0:	2301      	movls	r3, #1
 8000cf2:	2300      	movhi	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	e006      	b.n	8000d06 <HAL_I2C_Init+0x92>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4a7d      	ldr	r2, [pc, #500]	; (8000ef0 <HAL_I2C_Init+0x27c>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	bf94      	ite	ls
 8000d00:	2301      	movls	r3, #1
 8000d02:	2300      	movhi	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e0e7      	b.n	8000ede <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4a78      	ldr	r2, [pc, #480]	; (8000ef4 <HAL_I2C_Init+0x280>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	0c9b      	lsrs	r3, r3, #18
 8000d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a6a      	ldr	r2, [pc, #424]	; (8000ee8 <HAL_I2C_Init+0x274>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d802      	bhi.n	8000d48 <HAL_I2C_Init+0xd4>
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	3301      	adds	r3, #1
 8000d46:	e009      	b.n	8000d5c <HAL_I2C_Init+0xe8>
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d4e:	fb02 f303 	mul.w	r3, r2, r3
 8000d52:	4a69      	ldr	r2, [pc, #420]	; (8000ef8 <HAL_I2C_Init+0x284>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	099b      	lsrs	r3, r3, #6
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	430b      	orrs	r3, r1
 8000d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	495c      	ldr	r1, [pc, #368]	; (8000ee8 <HAL_I2C_Init+0x274>)
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d819      	bhi.n	8000db0 <HAL_I2C_Init+0x13c>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	1e59      	subs	r1, r3, #1
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d90:	400b      	ands	r3, r1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00a      	beq.n	8000dac <HAL_I2C_Init+0x138>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1e59      	subs	r1, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000daa:	e051      	b.n	8000e50 <HAL_I2C_Init+0x1dc>
 8000dac:	2304      	movs	r3, #4
 8000dae:	e04f      	b.n	8000e50 <HAL_I2C_Init+0x1dc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d111      	bne.n	8000ddc <HAL_I2C_Init+0x168>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	1e58      	subs	r0, r3, #1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6859      	ldr	r1, [r3, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	440b      	add	r3, r1
 8000dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dca:	3301      	adds	r3, #1
 8000dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	e012      	b.n	8000e02 <HAL_I2C_Init+0x18e>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1e58      	subs	r0, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6859      	ldr	r1, [r3, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	0099      	lsls	r1, r3, #2
 8000dec:	440b      	add	r3, r1
 8000dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df2:	3301      	adds	r3, #1
 8000df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_I2C_Init+0x196>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e022      	b.n	8000e50 <HAL_I2C_Init+0x1dc>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10e      	bne.n	8000e30 <HAL_I2C_Init+0x1bc>
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1e58      	subs	r0, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6859      	ldr	r1, [r3, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	440b      	add	r3, r1
 8000e20:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2e:	e00f      	b.n	8000e50 <HAL_I2C_Init+0x1dc>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6859      	ldr	r1, [r3, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	0099      	lsls	r1, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	6809      	ldr	r1, [r1, #0]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69da      	ldr	r2, [r3, #28]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6911      	ldr	r1, [r2, #16]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68d2      	ldr	r2, [r2, #12]
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0201 	orr.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2220      	movs	r2, #32
 8000eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	000186a0 	.word	0x000186a0
 8000eec:	001e847f 	.word	0x001e847f
 8000ef0:	003d08ff 	.word	0x003d08ff
 8000ef4:	431bde83 	.word	0x431bde83
 8000ef8:	10624dd3 	.word	0x10624dd3

08000efc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	b08b      	sub	sp, #44	; 0x2c
 8000f00:	af06      	add	r7, sp, #24
 8000f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e0fd      	b.n	800110a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d106      	bne.n	8000f28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fb6a 	bl	80005fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 faa9 	bl	800248c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	687e      	ldr	r6, [r7, #4]
 8000f42:	466d      	mov	r5, sp
 8000f44:	f106 0410 	add.w	r4, r6, #16
 8000f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	602b      	str	r3, [r5, #0]
 8000f50:	1d33      	adds	r3, r6, #4
 8000f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f001 fa89 	bl	800246c <USB_CoreInit>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2202      	movs	r2, #2
 8000f64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0ce      	b.n	800110a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 faa4 	bl	80024c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e04c      	b.n	8001018 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3301      	adds	r3, #1
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fa8:	7bfa      	ldrb	r2, [r7, #15]
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	b298      	uxth	r0, r3
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	3336      	adds	r3, #54	; 0x36
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3303      	adds	r3, #3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3338      	adds	r3, #56	; 0x38
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	333c      	adds	r3, #60	; 0x3c
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	3340      	adds	r3, #64	; 0x40
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	3301      	adds	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	429a      	cmp	r2, r3
 8001020:	d3ad      	bcc.n	8000f7e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	e044      	b.n	80010b2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	f203 1369 	addw	r3, r3, #361	; 0x169
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	440b      	add	r3, r1
 8001062:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	440b      	add	r3, r1
 8001078:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	3301      	adds	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3b5      	bcc.n	8001028 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	687e      	ldr	r6, [r7, #4]
 80010c4:	466d      	mov	r5, sp
 80010c6:	f106 0410 	add.w	r4, r6, #16
 80010ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	602b      	str	r3, [r5, #0]
 80010d2:	1d33      	adds	r3, r6, #4
 80010d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	f001 f9fe 	bl	80024d8 <USB_DevInit>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2202      	movs	r2, #2
 80010e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00d      	b.n	800110a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fa08 	bl	8002518 <USB_DevDisconnect>

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001114 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_PWR_EnableBkUpAccess+0x14>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	420e0020 	.word	0x420e0020

0800112c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e272      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8087 	beq.w	800125a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800114c:	4b92      	ldr	r3, [pc, #584]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b04      	cmp	r3, #4
 8001156:	d00c      	beq.n	8001172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001158:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d112      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
 8001164:	4b8c      	ldr	r3, [pc, #560]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d10b      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001172:	4b89      	ldr	r3, [pc, #548]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d06c      	beq.n	8001258 <HAL_RCC_OscConfig+0x12c>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d168      	bne.n	8001258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e24c      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x76>
 8001194:	4b80      	ldr	r3, [pc, #512]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a7f      	ldr	r2, [pc, #508]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e02e      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x98>
 80011aa:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b78      	ldr	r3, [pc, #480]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a77      	ldr	r2, [pc, #476]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0xbc>
 80011ce:	4b72      	ldr	r3, [pc, #456]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a71      	ldr	r2, [pc, #452]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011e8:	4b6b      	ldr	r3, [pc, #428]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6a      	ldr	r2, [pc, #424]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b68      	ldr	r3, [pc, #416]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a67      	ldr	r2, [pc, #412]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fac2 	bl	8000790 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fabe 	bl	8000790 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e200      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xe4>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff faae 	bl	8000790 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff faaa 	bl	8000790 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1ec      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x10c>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001266:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001272:	4b49      	ldr	r3, [pc, #292]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e1c0      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4939      	ldr	r1, [pc, #228]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x270>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fa63 	bl	8000790 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fa5f 	bl	8000790 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1a1      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4927      	ldr	r1, [pc, #156]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x270>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fa42 	bl	8000790 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fa3e 	bl	8000790 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e180      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03a      	beq.n	80013b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d019      	beq.n	8001376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fa22 	bl	8000790 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fa1e 	bl	8000790 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e160      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f000 fad8 	bl	8001924 <RCC_Delay>
 8001374:	e01c      	b.n	80013b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fa08 	bl	8000790 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001382:	e00f      	b.n	80013a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fa04 	bl	8000790 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d908      	bls.n	80013a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e146      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	42420000 	.word	0x42420000
 80013a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b92      	ldr	r3, [pc, #584]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e9      	bne.n	8001384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a6 	beq.w	800150a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b8b      	ldr	r3, [pc, #556]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a87      	ldr	r2, [pc, #540]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b85      	ldr	r3, [pc, #532]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b82      	ldr	r3, [pc, #520]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f6:	4b7f      	ldr	r3, [pc, #508]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7e      	ldr	r2, [pc, #504]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff f9c5 	bl	8000790 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff f9c1 	bl	8000790 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	; 0x64
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e103      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	4b75      	ldr	r3, [pc, #468]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x312>
 8001430:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a6e      	ldr	r2, [pc, #440]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	e02d      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x334>
 8001446:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4a69      	ldr	r2, [pc, #420]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6213      	str	r3, [r2, #32]
 8001452:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a66      	ldr	r2, [pc, #408]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x356>
 8001468:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a60      	ldr	r2, [pc, #384]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a5d      	ldr	r2, [pc, #372]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001482:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff f975 	bl	8000790 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff f971 	bl	8000790 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0b1      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x37e>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff f95f 	bl	8000790 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff f95b 	bl	8000790 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e09b      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a3b      	ldr	r2, [pc, #236]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8087 	beq.w	8001622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d061      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d146      	bne.n	80015b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff f92f 	bl	8000790 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff f92b 	bl	8000790 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e06d      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d108      	bne.n	8001570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4921      	ldr	r1, [pc, #132]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a19      	ldr	r1, [r3, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	430b      	orrs	r3, r1
 8001582:	491b      	ldr	r1, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff f8ff 	bl	8000790 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff f8fb 	bl	8000790 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e03d      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x46a>
 80015b4:	e035      	b.n	8001622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff f8e8 	bl	8000790 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff f8e4 	bl	8000790 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e026      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x498>
 80015e2:	e01e      	b.n	8001622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e019      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40007000 	.word	0x40007000
 80015f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x500>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	429a      	cmp	r2, r3
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0d0      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d910      	bls.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0207 	bic.w	r2, r3, #7
 800165a:	4965      	ldr	r1, [pc, #404]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	494d      	ldr	r1, [pc, #308]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d040      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d115      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e073      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06b      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4936      	ldr	r1, [pc, #216]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff f836 	bl	8000790 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff f832 	bl	8000790 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e053      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d210      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 0207 	bic.w	r2, r3, #7
 8001766:	4922      	ldr	r1, [pc, #136]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e032      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4916      	ldr	r1, [pc, #88]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	490e      	ldr	r1, [pc, #56]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017be:	f000 f821 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	490a      	ldr	r1, [pc, #40]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1cc>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1d0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe ff94 	bl	800070c <HAL_InitTick>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	080025bc 	.word	0x080025bc
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	b490      	push	{r4, r7}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800180c:	1d3c      	adds	r4, r7, #4
 800180e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001814:	f240 2301 	movw	r3, #513	; 0x201
 8001818:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d002      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x40>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d003      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x46>
 8001842:	e02b      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001846:	623b      	str	r3, [r7, #32]
      break;
 8001848:	e02b      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	0c9b      	lsrs	r3, r3, #18
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3328      	adds	r3, #40	; 0x28
 8001854:	443b      	add	r3, r7
 8001856:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800185a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d012      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	0c5b      	lsrs	r3, r3, #17
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	3328      	adds	r3, #40	; 0x28
 8001872:	443b      	add	r3, r7
 8001874:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001878:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800187e:	fb03 f202 	mul.w	r2, r3, r2
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
 800188a:	e004      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	623b      	str	r3, [r7, #32]
      break;
 800189a:	e002      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800189e:	623b      	str	r3, [r7, #32]
      break;
 80018a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a2:	6a3b      	ldr	r3, [r7, #32]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc90      	pop	{r4, r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	0800259c 	.word	0x0800259c
 80018b4:	40021000 	.word	0x40021000
 80018b8:	003d0900 	.word	0x003d0900
 80018bc:	007a1200 	.word	0x007a1200

080018c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018d8:	f7ff fff2 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4903      	ldr	r1, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ea:	5ccb      	ldrb	r3, [r1, r3]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	080025cc 	.word	0x080025cc

080018fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001900:	f7ff ffde 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	0adb      	lsrs	r3, r3, #11
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4903      	ldr	r1, [pc, #12]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000
 8001920:	080025cc 	.word	0x080025cc

08001924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <RCC_Delay+0x34>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <RCC_Delay+0x38>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001940:	bf00      	nop
  }
  while (Delay --);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	60fa      	str	r2, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <RCC_Delay+0x1c>
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000000 	.word	0x20000000
 800195c:	10624dd3 	.word	0x10624dd3

08001960 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d07d      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10d      	bne.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001996:	61d3      	str	r3, [r2, #28]
 8001998:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d118      	bne.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b4:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a42      	ldr	r2, [pc, #264]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c0:	f7fe fee6 	bl	8000790 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	e008      	b.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7fe fee2 	bl	8000790 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e06d      	b.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019e6:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d02e      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d027      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a04:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a14:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a1a:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d014      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7fe feb1 	bl	8000790 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7fe fead 	bl	8000790 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e036      	b.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ee      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4917      	ldr	r1, [pc, #92]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	490b      	ldr	r1, [pc, #44]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	4904      	ldr	r1, [pc, #16]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42420440 	.word	0x42420440

08001acc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b08d      	sub	sp, #52	; 0x34
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ad4:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001ad6:	f107 040c 	add.w	r4, r7, #12
 8001ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ae0:	f240 2301 	movw	r3, #513	; 0x201
 8001ae4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	2300      	movs	r3, #0
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d00a      	beq.n	8001b16 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	f200 808e 	bhi.w	8001c24 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d049      	beq.n	8001ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d079      	beq.n	8001c08 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001b14:	e086      	b.n	8001c24 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001b16:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d07f      	beq.n	8001c28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	3330      	adds	r3, #48	; 0x30
 8001b32:	443b      	add	r3, r7
 8001b34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b38:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d017      	beq.n	8001b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b44:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	0c5b      	lsrs	r3, r3, #17
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	3330      	adds	r3, #48	; 0x30
 8001b50:	443b      	add	r3, r7
 8001b52:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00d      	beq.n	8001b7e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001b62:	4a37      	ldr	r2, [pc, #220]	; (8001c40 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b72:	e004      	b.n	8001b7e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	4a32      	ldr	r2, [pc, #200]	; (8001c40 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b90:	e04a      	b.n	8001c28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4a2b      	ldr	r2, [pc, #172]	; (8001c44 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	085b      	lsrs	r3, r3, #1
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ba0:	e042      	b.n	8001c28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb2:	d108      	bne.n	8001bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bc4:	e01f      	b.n	8001c06 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8001bde:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be4:	e00f      	b.n	8001c06 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bf0:	d11c      	bne.n	8001c2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d016      	beq.n	8001c2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8001bfe:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001c04:	e012      	b.n	8001c2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8001c06:	e011      	b.n	8001c2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001c08:	f7ff fe78 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	0b9b      	lsrs	r3, r3, #14
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001c22:	e004      	b.n	8001c2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001c24:	bf00      	nop
 8001c26:	e002      	b.n	8001c2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001c28:	bf00      	nop
 8001c2a:	e000      	b.n	8001c2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8001c2c:	bf00      	nop
    }
  }
  return (frequency);
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3734      	adds	r7, #52	; 0x34
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}
 8001c38:	080025ac 	.word	0x080025ac
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	003d0900 	.word	0x003d0900
 8001c44:	aaaaaaab 	.word	0xaaaaaaab

08001c48 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e084      	b.n	8001d68 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7c5b      	ldrb	r3, [r3, #17]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe fc54 	bl	800051c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f9c8 	bl	8002010 <HAL_RTC_WaitForSynchro>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2204      	movs	r2, #4
 8001c8a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e06b      	b.n	8001d68 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fa81 	bl	8002198 <RTC_EnterInitMode>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e060      	b.n	8001d68 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0207 	bic.w	r2, r2, #7
 8001cb4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <HAL_RTC_Init+0x128>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a2b      	ldr	r2, [pc, #172]	; (8001d70 <HAL_RTC_Init+0x128>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001cca:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <HAL_RTC_Init+0x128>)
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4926      	ldr	r1, [pc, #152]	; (8001d70 <HAL_RTC_Init+0x128>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d003      	beq.n	8001cee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e00e      	b.n	8001d0c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff feec 	bl	8001acc <HAL_RCCEx_GetPeriphCLKFreq>
 8001cf4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d104      	bne.n	8001d06 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e030      	b.n	8001d68 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 010f 	bic.w	r1, r3, #15
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	0c1a      	lsrs	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	041b      	lsls	r3, r3, #16
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	b291      	uxth	r1, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fa55 	bl	80021e8 <RTC_ExitInitMode>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d004      	beq.n	8001d4e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2204      	movs	r2, #4
 8001d48:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00c      	b.n	8001d68 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40006c00 	.word	0x40006c00

08001d74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_RTC_SetTime+0x20>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e080      	b.n	8001e9a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	7c1b      	ldrb	r3, [r3, #16]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_RTC_SetTime+0x30>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e07a      	b.n	8001e9a <HAL_RTC_SetTime+0x126>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2202      	movs	r2, #2
 8001dae:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d113      	bne.n	8001dde <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001dc0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	460b      	mov	r3, r1
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a5b      	subs	r3, r3, r1
 8001dd0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001dd2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001dd8:	4413      	add	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e01e      	b.n	8001e1c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fa28 	bl	8002238 <RTC_Bcd2ToByte>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001df0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fa1d 	bl	8002238 <RTC_Bcd2ToByte>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	4613      	mov	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001e0a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	789b      	ldrb	r3, [r3, #2]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fa11 	bl	8002238 <RTC_Bcd2ToByte>
 8001e16:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001e18:	4423      	add	r3, r4
 8001e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001e1c:	6979      	ldr	r1, [r7, #20]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f953 	bl	80020ca <RTC_WriteTimeCounter>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e02f      	b.n	8001e9a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0205 	bic.w	r2, r2, #5
 8001e48:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f964 	bl	8002118 <RTC_ReadAlarmCounter>
 8001e50:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d018      	beq.n	8001e8c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d214      	bcs.n	8001e8c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001e68:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e6c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e6e:	6939      	ldr	r1, [r7, #16]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f96a 	bl	800214a <RTC_WriteAlarmCounter>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e006      	b.n	8001e9a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
  }
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd90      	pop	{r4, r7, pc}
	...

08001ea4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_RTC_SetDate+0x24>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e097      	b.n	8001ffc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	7c1b      	ldrb	r3, [r3, #16]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RTC_SetDate+0x34>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e091      	b.n	8001ffc <HAL_RTC_SetDate+0x158>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	78da      	ldrb	r2, [r3, #3]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	785a      	ldrb	r2, [r3, #1]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	789a      	ldrb	r2, [r3, #2]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	739a      	strb	r2, [r3, #14]
 8001f02:	e01a      	b.n	8001f3a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	78db      	ldrb	r3, [r3, #3]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f995 	bl	8002238 <RTC_Bcd2ToByte>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f98c 	bl	8002238 <RTC_Bcd2ToByte>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f983 	bl	8002238 <RTC_Bcd2ToByte>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	7bdb      	ldrb	r3, [r3, #15]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	7b59      	ldrb	r1, [r3, #13]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	7b9b      	ldrb	r3, [r3, #14]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f000 f993 	bl	8002274 <RTC_WeekDayNum>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	7b1a      	ldrb	r2, [r3, #12]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f883 	bl	800206a <RTC_ReadTimeCounter>
 8001f64:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_RTC_SetDate+0x160>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0adb      	lsrs	r3, r3, #11
 8001f70:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b18      	cmp	r3, #24
 8001f76:	d93a      	bls.n	8001fee <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	4a23      	ldr	r2, [pc, #140]	; (8002008 <HAL_RTC_SetDate+0x164>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_RTC_SetDate+0x168>)
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001f8e:	69f9      	ldr	r1, [r7, #28]
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f89a 	bl	80020ca <RTC_WriteTimeCounter>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e027      	b.n	8001ffc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f8b3 	bl	8002118 <RTC_ReadAlarmCounter>
 8001fb2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fba:	d018      	beq.n	8001fee <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d214      	bcs.n	8001fee <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001fca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001fce:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001fd0:	69b9      	ldr	r1, [r7, #24]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f8b9 	bl	800214a <RTC_WriteAlarmCounter>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e006      	b.n	8001ffc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	91a2b3c5 	.word	0x91a2b3c5
 8002008:	aaaaaaab 	.word	0xaaaaaaab
 800200c:	00015180 	.word	0x00015180

08002010 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e01d      	b.n	8002062 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0208 	bic.w	r2, r2, #8
 8002034:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002036:	f7fe fbab 	bl	8000790 <HAL_GetTick>
 800203a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800203c:	e009      	b.n	8002052 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800203e:	f7fe fba7 	bl	8000790 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800204c:	d901      	bls.n	8002052 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e007      	b.n	8002062 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ee      	beq.n	800203e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800206a:	b480      	push	{r7}
 800206c:	b087      	sub	sp, #28
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	827b      	strh	r3, [r7, #18]
 8002076:	2300      	movs	r3, #0
 8002078:	823b      	strh	r3, [r7, #16]
 800207a:	2300      	movs	r3, #0
 800207c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800209a:	8a7a      	ldrh	r2, [r7, #18]
 800209c:	8a3b      	ldrh	r3, [r7, #16]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d008      	beq.n	80020b4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80020a2:	8a3b      	ldrh	r3, [r7, #16]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e004      	b.n	80020be <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80020b4:	8a7b      	ldrh	r3, [r7, #18]
 80020b6:	041a      	lsls	r2, r3, #16
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80020be:	697b      	ldr	r3, [r7, #20]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f85d 	bl	8002198 <RTC_EnterInitMode>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e011      	b.n	800210e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	0c12      	lsrs	r2, r2, #16
 80020f2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	b292      	uxth	r2, r2
 80020fc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f872 	bl	80021e8 <RTC_ExitInitMode>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	81fb      	strh	r3, [r7, #14]
 8002124:	2300      	movs	r3, #0
 8002126:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002138:	89fb      	ldrh	r3, [r7, #14]
 800213a:	041a      	lsls	r2, r3, #16
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4313      	orrs	r3, r2
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f81d 	bl	8002198 <RTC_EnterInitMode>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e011      	b.n	800218e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	0c12      	lsrs	r2, r2, #16
 8002172:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b292      	uxth	r2, r2
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f832 	bl	80021e8 <RTC_ExitInitMode>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80021a4:	f7fe faf4 	bl	8000790 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021aa:	e009      	b.n	80021c0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80021ac:	f7fe faf0 	bl	8000790 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ba:	d901      	bls.n	80021c0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e00f      	b.n	80021e0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ee      	beq.n	80021ac <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0210 	orr.w	r2, r2, #16
 80021dc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0210 	bic.w	r2, r2, #16
 8002202:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002204:	f7fe fac4 	bl	8000790 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800220a:	e009      	b.n	8002220 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800220c:	f7fe fac0 	bl	8000790 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800221a:	d901      	bls.n	8002220 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e007      	b.n	8002230 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0ee      	beq.n	800220c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	b2da      	uxtb	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4413      	add	r3, r2
 8002266:	b2db      	uxtb	r3, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
	...

08002274 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
 8002280:	4613      	mov	r3, r2
 8002282:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002292:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d82d      	bhi.n	80022f6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <RTC_WeekDayNum+0xe4>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	085a      	lsrs	r2, r3, #1
 80022ae:	78bb      	ldrb	r3, [r7, #2]
 80022b0:	441a      	add	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	441a      	add	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	4926      	ldr	r1, [pc, #152]	; (800235c <RTC_WeekDayNum+0xe8>)
 80022c4:	fba1 1303 	umull	r1, r3, r1, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	1ad2      	subs	r2, r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	4922      	ldr	r1, [pc, #136]	; (800235c <RTC_WeekDayNum+0xe8>)
 80022d2:	fba1 1303 	umull	r1, r3, r1, r3
 80022d6:	09db      	lsrs	r3, r3, #7
 80022d8:	4413      	add	r3, r2
 80022da:	1d1a      	adds	r2, r3, #4
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <RTC_WeekDayNum+0xec>)
 80022de:	fba3 1302 	umull	r1, r3, r3, r2
 80022e2:	1ad1      	subs	r1, r2, r3
 80022e4:	0849      	lsrs	r1, r1, #1
 80022e6:	440b      	add	r3, r1
 80022e8:	0899      	lsrs	r1, r3, #2
 80022ea:	460b      	mov	r3, r1
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	1a5b      	subs	r3, r3, r1
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e029      	b.n	800234a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <RTC_WeekDayNum+0xe4>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	085a      	lsrs	r2, r3, #1
 800230a:	78bb      	ldrb	r3, [r7, #2]
 800230c:	441a      	add	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	441a      	add	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	441a      	add	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4910      	ldr	r1, [pc, #64]	; (800235c <RTC_WeekDayNum+0xe8>)
 800231c:	fba1 1303 	umull	r1, r3, r1, r3
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <RTC_WeekDayNum+0xe8>)
 8002328:	fba1 1303 	umull	r1, r3, r1, r3
 800232c:	09db      	lsrs	r3, r3, #7
 800232e:	4413      	add	r3, r2
 8002330:	1c9a      	adds	r2, r3, #2
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <RTC_WeekDayNum+0xec>)
 8002334:	fba3 1302 	umull	r1, r3, r3, r2
 8002338:	1ad1      	subs	r1, r2, r3
 800233a:	0849      	lsrs	r1, r1, #1
 800233c:	440b      	add	r3, r1
 800233e:	0899      	lsrs	r1, r3, #2
 8002340:	460b      	mov	r3, r1
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a5b      	subs	r3, r3, r1
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	b2db      	uxtb	r3, r3
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	38e38e39 	.word	0x38e38e39
 800235c:	51eb851f 	.word	0x51eb851f
 8002360:	24924925 	.word	0x24924925

08002364 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e076      	b.n	8002464 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2b00      	cmp	r3, #0
 800237c:	d108      	bne.n	8002390 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002386:	d009      	beq.n	800239c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
 800238e:	e005      	b.n	800239c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe f8d4 	bl	8000564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	ea42 0103 	orr.w	r1, r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	0c1a      	lsrs	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f002 0204 	and.w	r2, r2, #4
 8002442:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002452:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800246c:	b084      	sub	sp, #16
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	f107 0014 	add.w	r0, r7, #20
 800247a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	b004      	add	sp, #16
 800248a:	4770      	bx	lr

0800248c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002494:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002498:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4013      	ands	r3, r2
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80024d8:	b084      	sub	sp, #16
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	f107 0014 	add.w	r0, r7, #20
 80024e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	b004      	add	sp, #16
 8002516:	4770      	bx	lr

08002518 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <__libc_init_array>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	2600      	movs	r6, #0
 8002530:	4d0c      	ldr	r5, [pc, #48]	; (8002564 <__libc_init_array+0x38>)
 8002532:	4c0d      	ldr	r4, [pc, #52]	; (8002568 <__libc_init_array+0x3c>)
 8002534:	1b64      	subs	r4, r4, r5
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	42a6      	cmp	r6, r4
 800253a:	d109      	bne.n	8002550 <__libc_init_array+0x24>
 800253c:	f000 f822 	bl	8002584 <_init>
 8002540:	2600      	movs	r6, #0
 8002542:	4d0a      	ldr	r5, [pc, #40]	; (800256c <__libc_init_array+0x40>)
 8002544:	4c0a      	ldr	r4, [pc, #40]	; (8002570 <__libc_init_array+0x44>)
 8002546:	1b64      	subs	r4, r4, r5
 8002548:	10a4      	asrs	r4, r4, #2
 800254a:	42a6      	cmp	r6, r4
 800254c:	d105      	bne.n	800255a <__libc_init_array+0x2e>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f855 3b04 	ldr.w	r3, [r5], #4
 8002554:	4798      	blx	r3
 8002556:	3601      	adds	r6, #1
 8002558:	e7ee      	b.n	8002538 <__libc_init_array+0xc>
 800255a:	f855 3b04 	ldr.w	r3, [r5], #4
 800255e:	4798      	blx	r3
 8002560:	3601      	adds	r6, #1
 8002562:	e7f2      	b.n	800254a <__libc_init_array+0x1e>
 8002564:	080025d4 	.word	0x080025d4
 8002568:	080025d4 	.word	0x080025d4
 800256c:	080025d4 	.word	0x080025d4
 8002570:	080025d8 	.word	0x080025d8

08002574 <memset>:
 8002574:	4603      	mov	r3, r0
 8002576:	4402      	add	r2, r0
 8002578:	4293      	cmp	r3, r2
 800257a:	d100      	bne.n	800257e <memset+0xa>
 800257c:	4770      	bx	lr
 800257e:	f803 1b01 	strb.w	r1, [r3], #1
 8002582:	e7f9      	b.n	8002578 <memset+0x4>

08002584 <_init>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr

08002590 <_fini>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	bf00      	nop
 8002594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002596:	bc08      	pop	{r3}
 8002598:	469e      	mov	lr, r3
 800259a:	4770      	bx	lr
