
testing-stuff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800307c  0800307c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003084  08003084  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800308c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08003098  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003098  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e00f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce9  00000000  00000000  0002e043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000108b2  00000000  00000000  00031458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f000  00000000  00000000  00041d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006526c  00000000  00000000  00050d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b5f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b38  00000000  00000000  000b5fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ff8 	.word	0x08002ff8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ff8 	.word	0x08002ff8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fbc2 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f80c 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f9cc 	bl	8000844 <MX_GPIO_Init>
  MX_ADC_Init();
 80004ac:	f000 f87e 	bl	80005ac <MX_ADC_Init>
  MX_I2C1_Init();
 80004b0:	f000 f91e 	bl	80006f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004b4:	f000 f95c 	bl	8000770 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004b8:	f000 f992 	bl	80007e0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <main+0x20>
	...

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b099      	sub	sp, #100	; 0x64
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	242c      	movs	r4, #44	; 0x2c
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2334      	movs	r3, #52	; 0x34
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f002 fd89 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	2318      	movs	r3, #24
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	0018      	movs	r0, r3
 80004dc:	2314      	movs	r3, #20
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 fd81 	bl	8002fe8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e6:	003b      	movs	r3, r7
 80004e8:	0018      	movs	r0, r3
 80004ea:	2318      	movs	r3, #24
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f002 fd7a 	bl	8002fe8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <SystemClock_Config+0xe4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <SystemClock_Config+0xe8>)
 80004fa:	401a      	ands	r2, r3
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <SystemClock_Config+0xe4>)
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	0109      	lsls	r1, r1, #4
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000506:	0021      	movs	r1, r4
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2210      	movs	r2, #16
 800050c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2201      	movs	r2, #1
 8000512:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	22a0      	movs	r2, #160	; 0xa0
 800051e:	0212      	lsls	r2, r2, #8
 8000520:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	187b      	adds	r3, r7, r1
 800052a:	0018      	movs	r0, r3
 800052c:	f001 f910 	bl	8001750 <HAL_RCC_OscConfig>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000534:	f000 f9d4 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	2118      	movs	r1, #24
 800053a:	187b      	adds	r3, r7, r1
 800053c:	220f      	movs	r2, #15
 800053e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2100      	movs	r1, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fc73 	bl	8001e48 <HAL_RCC_ClockConfig>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000566:	f000 f9bb 	bl	80008e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800056a:	003b      	movs	r3, r7
 800056c:	220a      	movs	r2, #10
 800056e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000576:	003b      	movs	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800057c:	003b      	movs	r3, r7
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fee8 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000588:	f000 f9aa 	bl	80008e0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	045b      	lsls	r3, r3, #17
 8000590:	2200      	movs	r2, #0
 8000592:	0019      	movs	r1, r3
 8000594:	2000      	movs	r0, #0
 8000596:	f001 fd9f 	bl	80020d8 <HAL_RCC_MCOConfig>
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b019      	add	sp, #100	; 0x64
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	40007000 	.word	0x40007000
 80005a8:	ffffe7ff 	.word	0xffffe7ff

080005ac <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2308      	movs	r3, #8
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f002 fd14 	bl	8002fe8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005c0:	4b44      	ldr	r3, [pc, #272]	; (80006d4 <MX_ADC_Init+0x128>)
 80005c2:	4a45      	ldr	r2, [pc, #276]	; (80006d8 <MX_ADC_Init+0x12c>)
 80005c4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005c6:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <MX_ADC_Init+0x128>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005cc:	4b41      	ldr	r3, [pc, #260]	; (80006d4 <MX_ADC_Init+0x128>)
 80005ce:	22c0      	movs	r2, #192	; 0xc0
 80005d0:	0612      	lsls	r2, r2, #24
 80005d2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <MX_ADC_Init+0x128>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005da:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <MX_ADC_Init+0x128>)
 80005dc:	2200      	movs	r2, #0
 80005de:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005e0:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <MX_ADC_Init+0x128>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <MX_ADC_Init+0x128>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005ec:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <MX_ADC_Init+0x128>)
 80005ee:	2220      	movs	r2, #32
 80005f0:	2100      	movs	r1, #0
 80005f2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <MX_ADC_Init+0x128>)
 80005f6:	2221      	movs	r2, #33	; 0x21
 80005f8:	2100      	movs	r1, #0
 80005fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fc:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <MX_ADC_Init+0x128>)
 80005fe:	2200      	movs	r2, #0
 8000600:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000602:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <MX_ADC_Init+0x128>)
 8000604:	22c2      	movs	r2, #194	; 0xc2
 8000606:	32ff      	adds	r2, #255	; 0xff
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_ADC_Init+0x128>)
 800060c:	222c      	movs	r2, #44	; 0x2c
 800060e:	2100      	movs	r1, #0
 8000610:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_ADC_Init+0x128>)
 8000614:	2204      	movs	r2, #4
 8000616:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000618:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC_Init+0x128>)
 800061a:	2200      	movs	r2, #0
 800061c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <MX_ADC_Init+0x128>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC_Init+0x128>)
 8000626:	2201      	movs	r2, #1
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800062a:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <MX_ADC_Init+0x128>)
 800062c:	2200      	movs	r2, #0
 800062e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC_Init+0x128>)
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fb68 	bl	8000d08 <HAL_ADC_Init>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800063c:	f000 f950 	bl	80008e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000640:	003b      	movs	r3, r7
 8000642:	4a26      	ldr	r2, [pc, #152]	; (80006dc <MX_ADC_Init+0x130>)
 8000644:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000646:	003b      	movs	r3, r7
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	0152      	lsls	r2, r2, #5
 800064c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800064e:	003a      	movs	r2, r7
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC_Init+0x128>)
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fccb 	bl	8000ff0 <HAL_ADC_ConfigChannel>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800065e:	f000 f93f 	bl	80008e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000662:	003b      	movs	r3, r7
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <MX_ADC_Init+0x134>)
 8000666:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000668:	003a      	movs	r2, r7
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_ADC_Init+0x128>)
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fcbe 	bl	8000ff0 <HAL_ADC_ConfigChannel>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000678:	f000 f932 	bl	80008e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800067c:	003b      	movs	r3, r7
 800067e:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <MX_ADC_Init+0x138>)
 8000680:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000682:	003a      	movs	r2, r7
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_ADC_Init+0x128>)
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fcb1 	bl	8000ff0 <HAL_ADC_ConfigChannel>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000692:	f000 f925 	bl	80008e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000696:	003b      	movs	r3, r7
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_ADC_Init+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800069c:	003a      	movs	r2, r7
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_ADC_Init+0x128>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fca4 	bl	8000ff0 <HAL_ADC_ConfigChannel>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80006ac:	f000 f918 	bl	80008e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006b0:	003b      	movs	r3, r7
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <MX_ADC_Init+0x140>)
 80006b4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006b6:	003a      	movs	r2, r7
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_ADC_Init+0x128>)
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fc97 	bl	8000ff0 <HAL_ADC_ConfigChannel>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 80006c6:	f000 f90b 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	20000154 	.word	0x20000154
 80006d8:	40012400 	.word	0x40012400
 80006dc:	0c000008 	.word	0x0c000008
 80006e0:	10000010 	.word	0x10000010
 80006e4:	14000020 	.word	0x14000020
 80006e8:	18000040 	.word	0x18000040
 80006ec:	1c000080 	.word	0x1c000080

080006f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_I2C1_Init+0x78>)
 80006f6:	4a1d      	ldr	r2, [pc, #116]	; (800076c <MX_I2C1_Init+0x7c>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C1_Init+0x78>)
 80006fc:	22e1      	movs	r2, #225	; 0xe1
 80006fe:	00d2      	lsls	r2, r2, #3
 8000700:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_I2C1_Init+0x78>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_I2C1_Init+0x78>)
 800070a:	2201      	movs	r2, #1
 800070c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_I2C1_Init+0x78>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_I2C1_Init+0x78>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2C1_Init+0x78>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C1_Init+0x78>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2C1_Init+0x78>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_I2C1_Init+0x78>)
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fee0 	bl	80014f4 <HAL_I2C_Init>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f8d2 	bl	80008e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_I2C1_Init+0x78>)
 800073e:	2100      	movs	r1, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f000 ff6d 	bl	8001620 <HAL_I2CEx_ConfigAnalogFilter>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800074a:	f000 f8c9 	bl	80008e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_I2C1_Init+0x78>)
 8000750:	2100      	movs	r1, #0
 8000752:	0018      	movs	r0, r3
 8000754:	f000 ffb0 	bl	80016b8 <HAL_I2CEx_ConfigDigitalFilter>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800075c:	f000 f8c0 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000028 	.word	0x20000028
 800076c:	40005400 	.word	0x40005400

08000770 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_SPI1_Init+0x68>)
 8000776:	4a19      	ldr	r2, [pc, #100]	; (80007dc <MX_SPI1_Init+0x6c>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_SPI1_Init+0x68>)
 800077c:	2282      	movs	r2, #130	; 0x82
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_SPI1_Init+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_SPI1_Init+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_SPI1_Init+0x68>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_SPI1_Init+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_SPI1_Init+0x68>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	02d2      	lsls	r2, r2, #11
 80007a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_SPI1_Init+0x68>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_SPI1_Init+0x68>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_SPI1_Init+0x68>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_SPI1_Init+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_SPI1_Init+0x68>)
 80007bc:	2207      	movs	r2, #7
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <MX_SPI1_Init+0x68>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 feec 	bl	80025a0 <HAL_SPI_Init>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007cc:	f000 f888 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	20000078 	.word	0x20000078
 80007dc:	40013000 	.word	0x40013000

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_USART2_UART_Init+0x60>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007ec:	22e1      	movs	r2, #225	; 0xe1
 80007ee:	0252      	lsls	r2, r2, #9
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USART2_UART_Init+0x5c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_USART2_UART_Init+0x5c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x5c>)
 800080c:	22c0      	movs	r2, #192	; 0xc0
 800080e:	0092      	lsls	r2, r2, #2
 8000810:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_USART2_UART_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x5c>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_USART2_UART_Init+0x5c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x5c>)
 8000826:	0018      	movs	r0, r3
 8000828:	f001 ff44 	bl	80026b4 <HAL_UART_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8000830:	f000 f856 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	200000d0 	.word	0x200000d0
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	240c      	movs	r4, #12
 800084c:	193b      	adds	r3, r7, r4
 800084e:	0018      	movs	r0, r3
 8000850:	2314      	movs	r3, #20
 8000852:	001a      	movs	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f002 fbc7 	bl	8002fe8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_GPIO_Init+0x98>)
 800085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0x98>)
 8000860:	2104      	movs	r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_GPIO_Init+0x98>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	2204      	movs	r2, #4
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_GPIO_Init+0x98>)
 8000874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_GPIO_Init+0x98>)
 8000878:	2101      	movs	r1, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_GPIO_Init+0x98>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	2201      	movs	r2, #1
 8000884:	4013      	ands	r3, r2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_GPIO_Init+0x98>)
 800088c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_GPIO_Init+0x98>)
 8000890:	2102      	movs	r1, #2
 8000892:	430a      	orrs	r2, r1
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_GPIO_Init+0x98>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	2202      	movs	r2, #2
 800089c:	4013      	ands	r3, r2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0052      	lsls	r2, r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	0021      	movs	r1, r4
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2202      	movs	r2, #2
 80008b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	187a      	adds	r2, r7, r1
 80008c6:	23a0      	movs	r3, #160	; 0xa0
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fcab 	bl	8001228 <HAL_GPIO_Init>

}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b009      	add	sp, #36	; 0x24
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40021000 	.word	0x40021000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_MspInit+0x24>)
 80008f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x24>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	430a      	orrs	r2, r1
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <HAL_MspInit+0x24>)
 80008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_MspInit+0x24>)
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	0549      	lsls	r1, r1, #21
 8000906:	430a      	orrs	r2, r1
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	240c      	movs	r4, #12
 800091e:	193b      	adds	r3, r7, r4
 8000920:	0018      	movs	r0, r3
 8000922:	2314      	movs	r3, #20
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f002 fb5e 	bl	8002fe8 <memset>
  if(hadc->Instance==ADC1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <HAL_ADC_MspInit+0x70>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d122      	bne.n	800097c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_ADC_MspInit+0x74>)
 8000938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <HAL_ADC_MspInit+0x74>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0089      	lsls	r1, r1, #2
 8000940:	430a      	orrs	r2, r1
 8000942:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_ADC_MspInit+0x74>)
 8000946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_ADC_MspInit+0x74>)
 800094a:	2101      	movs	r1, #1
 800094c:	430a      	orrs	r2, r1
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_ADC_MspInit+0x74>)
 8000952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000954:	2201      	movs	r2, #1
 8000956:	4013      	ands	r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800095c:	193b      	adds	r3, r7, r4
 800095e:	22f8      	movs	r2, #248	; 0xf8
 8000960:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2203      	movs	r2, #3
 8000966:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	193a      	adds	r2, r7, r4
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fc56 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b009      	add	sp, #36	; 0x24
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40012400 	.word	0x40012400
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	240c      	movs	r4, #12
 8000996:	193b      	adds	r3, r7, r4
 8000998:	0018      	movs	r0, r3
 800099a:	2314      	movs	r3, #20
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f002 fb22 	bl	8002fe8 <memset>
  if(hi2c->Instance==I2C1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0x7c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d128      	bne.n	8000a00 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009b4:	2102      	movs	r1, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009be:	2202      	movs	r2, #2
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009c6:	0021      	movs	r1, r4
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	22c0      	movs	r2, #192	; 0xc0
 80009cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2212      	movs	r2, #18
 80009d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2203      	movs	r2, #3
 80009de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2201      	movs	r2, #1
 80009e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <HAL_I2C_MspInit+0x84>)
 80009ea:	0019      	movs	r1, r3
 80009ec:	0010      	movs	r0, r2
 80009ee:	f000 fc1b 	bl	8001228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	0389      	lsls	r1, r1, #14
 80009fc:	430a      	orrs	r2, r1
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b009      	add	sp, #36	; 0x24
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	50000400 	.word	0x50000400

08000a14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b08b      	sub	sp, #44	; 0x2c
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	2414      	movs	r4, #20
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	0018      	movs	r0, r3
 8000a22:	2314      	movs	r3, #20
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f002 fade 	bl	8002fe8 <memset>
  if(hspi->Instance==SPI1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a29      	ldr	r2, [pc, #164]	; (8000ad8 <HAL_SPI_MspInit+0xc4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d14b      	bne.n	8000ace <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <HAL_SPI_MspInit+0xc8>)
 8000a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <HAL_SPI_MspInit+0xc8>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0149      	lsls	r1, r1, #5
 8000a40:	430a      	orrs	r2, r1
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <HAL_SPI_MspInit+0xc8>)
 8000a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <HAL_SPI_MspInit+0xc8>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a50:	4b22      	ldr	r3, [pc, #136]	; (8000adc <HAL_SPI_MspInit+0xc8>)
 8000a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a54:	2201      	movs	r2, #1
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_SPI_MspInit+0xc8>)
 8000a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_SPI_MspInit+0xc8>)
 8000a62:	2102      	movs	r1, #2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_SPI_MspInit+0xc8>)
 8000a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	4013      	ands	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	0212      	lsls	r2, r2, #8
 8000a7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2202      	movs	r2, #2
 8000a80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	193a      	adds	r2, r7, r4
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fbc3 	bl	8001228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000aa2:	0021      	movs	r1, r4
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2238      	movs	r2, #56	; 0x38
 8000aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2202      	movs	r2, #2
 8000aae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <HAL_SPI_MspInit+0xcc>)
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	0010      	movs	r0, r2
 8000aca:	f000 fbad 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b00b      	add	sp, #44	; 0x2c
 8000ad4:	bd90      	pop	{r4, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40013000 	.word	0x40013000
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	50000400 	.word	0x50000400

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	240c      	movs	r4, #12
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	2314      	movs	r3, #20
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f002 fa76 	bl	8002fe8 <memset>
  if(huart->Instance==USART2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a18      	ldr	r2, [pc, #96]	; (8000b64 <HAL_UART_MspInit+0x80>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12a      	bne.n	8000b5c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	0289      	lsls	r1, r1, #10
 8000b10:	430a      	orrs	r2, r1
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b24:	2201      	movs	r2, #1
 8000b26:	4013      	ands	r3, r2
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    PA11     ------> USART2_CTS
    PA12     ------> USART2_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	22f0      	movs	r2, #240	; 0xf0
 8000b30:	0152      	lsls	r2, r2, #5
 8000b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	0021      	movs	r1, r4
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2202      	movs	r2, #2
 8000b3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2203      	movs	r2, #3
 8000b46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	187a      	adds	r2, r7, r1
 8000b50:	23a0      	movs	r3, #160	; 0xa0
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	0011      	movs	r1, r2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 fb66 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b009      	add	sp, #36	; 0x24
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40021000 	.word	0x40021000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f89e 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ba6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000baa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000bac:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <LoopForever+0xa>)
    CMP R1, R2
 8000bb0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000bb2:	d105      	bne.n	8000bc0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000bb6:	4913      	ldr	r1, [pc, #76]	; (8000c04 <LoopForever+0x12>)
    STR R1, [R0]
 8000bb8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000bbc:	4913      	ldr	r1, [pc, #76]	; (8000c0c <LoopForever+0x1a>)
    STR R1, [R0]
 8000bbe:	6001      	str	r1, [r0, #0]

08000bc0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	4813      	ldr	r0, [pc, #76]	; (8000c10 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000bc2:	4914      	ldr	r1, [pc, #80]	; (8000c14 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <LoopForever+0x26>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000bd8:	4c11      	ldr	r4, [pc, #68]	; (8000c20 <LoopForever+0x2e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000be6:	f7ff ffd8 	bl	8000b9a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 f9d9 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fc55 	bl	800049c <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
   ldr   r0, =_estack
 8000bf4:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000bf8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000bfc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000c00:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000c04:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c08:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c0c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c18:	0800308c 	.word	0x0800308c
  ldr r2, =_sbss
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c20:	200001b4 	.word	0x200001b4

08000c24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_IRQHandler>
	...

08000c28 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x3c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Init+0x3c>)
 8000c3a:	2140      	movs	r1, #64	; 0x40
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f811 	bl	8000c68 <HAL_InitTick>
 8000c46:	1e03      	subs	r3, r0, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e001      	b.n	8000c56 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c52:	f7ff fe4b 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000c72:	681c      	ldr	r4, [r3, #0]
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_InitTick+0x60>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	0019      	movs	r1, r3
 8000c7a:	23fa      	movs	r3, #250	; 0xfa
 8000c7c:	0098      	lsls	r0, r3, #2
 8000c7e:	f7ff fa43 	bl	8000108 <__udivsi3>
 8000c82:	0003      	movs	r3, r0
 8000c84:	0019      	movs	r1, r3
 8000c86:	0020      	movs	r0, r4
 8000c88:	f7ff fa3e 	bl	8000108 <__udivsi3>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 fabd 	bl	800120e <HAL_SYSTICK_Config>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e00f      	b.n	8000cbc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d80b      	bhi.n	8000cba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fa9a 	bl	80011e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_InitTick+0x64>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b003      	add	sp, #12
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	001a      	movs	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	18d2      	adds	r2, r2, r3
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	200001b0 	.word	0x200001b0

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	200001b0 	.word	0x200001b0

08000d08 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e159      	b.n	8000fce <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2250      	movs	r2, #80	; 0x50
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fdee 	bl	8000914 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d3c:	2210      	movs	r2, #16
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b10      	cmp	r3, #16
 8000d42:	d005      	beq.n	8000d50 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d4e:	d00b      	beq.n	8000d68 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d54:	2210      	movs	r2, #16
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2250      	movs	r2, #80	; 0x50
 8000d60:	2100      	movs	r1, #0
 8000d62:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e132      	b.n	8000fce <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6c:	4a9a      	ldr	r2, [pc, #616]	; (8000fd8 <HAL_ADC_Init+0x2d0>)
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2202      	movs	r2, #2
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d108      	bne.n	8000d98 <HAL_ADC_Init+0x90>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d101      	bne.n	8000d98 <HAL_ADC_Init+0x90>
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <HAL_ADC_Init+0x92>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d149      	bne.n	8000e32 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	23c0      	movs	r3, #192	; 0xc0
 8000da4:	061b      	lsls	r3, r3, #24
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d00b      	beq.n	8000dc2 <HAL_ADC_Init+0xba>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d005      	beq.n	8000dc2 <HAL_ADC_Init+0xba>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	061b      	lsls	r3, r3, #24
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d111      	bne.n	8000de6 <HAL_ADC_Init+0xde>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	0892      	lsrs	r2, r2, #2
 8000dd0:	611a      	str	r2, [r3, #16]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6919      	ldr	r1, [r3, #16]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	e014      	b.n	8000e10 <HAL_ADC_Init+0x108>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	0892      	lsrs	r2, r2, #2
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	4b79      	ldr	r3, [pc, #484]	; (8000fdc <HAL_ADC_Init+0x2d4>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b78      	ldr	r3, [pc, #480]	; (8000fdc <HAL_ADC_Init+0x2d4>)
 8000dfc:	4978      	ldr	r1, [pc, #480]	; (8000fe0 <HAL_ADC_Init+0x2d8>)
 8000dfe:	400a      	ands	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	4b76      	ldr	r3, [pc, #472]	; (8000fdc <HAL_ADC_Init+0x2d4>)
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	4b74      	ldr	r3, [pc, #464]	; (8000fdc <HAL_ADC_Init+0x2d4>)
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2118      	movs	r1, #24
 8000e1c:	438a      	bics	r2, r1
 8000e1e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68d9      	ldr	r1, [r3, #12]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000e32:	4b6a      	ldr	r3, [pc, #424]	; (8000fdc <HAL_ADC_Init+0x2d4>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b69      	ldr	r3, [pc, #420]	; (8000fdc <HAL_ADC_Init+0x2d4>)
 8000e38:	496a      	ldr	r1, [pc, #424]	; (8000fe4 <HAL_ADC_Init+0x2dc>)
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000e3e:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <HAL_ADC_Init+0x2d4>)
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	065a      	lsls	r2, r3, #25
 8000e48:	4b64      	ldr	r3, [pc, #400]	; (8000fdc <HAL_ADC_Init+0x2d4>)
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	055b      	lsls	r3, r3, #21
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d108      	bne.n	8000e6e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	0549      	lsls	r1, r1, #21
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	495b      	ldr	r1, [pc, #364]	; (8000fe8 <HAL_ADC_Init+0x2e0>)
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68d9      	ldr	r1, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d101      	bne.n	8000e94 <HAL_ADC_Init+0x18c>
 8000e90:	2304      	movs	r3, #4
 8000e92:	e000      	b.n	8000e96 <HAL_ADC_Init+0x18e>
 8000e94:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e96:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2020      	movs	r0, #32
 8000e9c:	5c1b      	ldrb	r3, [r3, r0]
 8000e9e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ea0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	202c      	movs	r0, #44	; 0x2c
 8000ea6:	5c1b      	ldrb	r3, [r3, r0]
 8000ea8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000eaa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000eb0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000eb8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ec0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ece:	23c2      	movs	r3, #194	; 0xc2
 8000ed0:	33ff      	adds	r3, #255	; 0xff
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d00b      	beq.n	8000eee <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68d9      	ldr	r1, [r3, #12]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2221      	movs	r2, #33	; 0x21
 8000ef2:	5c9b      	ldrb	r3, [r3, r2]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d11a      	bne.n	8000f2e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2220      	movs	r2, #32
 8000efc:	5c9b      	ldrb	r3, [r3, r2]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0249      	lsls	r1, r1, #9
 8000f10:	430a      	orrs	r2, r1
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	e00b      	b.n	8000f2e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	2201      	movs	r2, #1
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d11f      	bne.n	8000f76 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	492a      	ldr	r1, [pc, #168]	; (8000fec <HAL_ADC_Init+0x2e4>)
 8000f42:	400a      	ands	r2, r1
 8000f44:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6919      	ldr	r1, [r3, #16]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f54:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000f5a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2101      	movs	r1, #1
 8000f70:	430a      	orrs	r2, r1
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	e00e      	b.n	8000f94 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d107      	bne.n	8000f94 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	438a      	bics	r2, r1
 8000f92:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2107      	movs	r1, #7
 8000fa0:	438a      	bics	r2, r1
 8000fa2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6959      	ldr	r1, [r3, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	4393      	bics	r3, r2
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	fffffefd 	.word	0xfffffefd
 8000fdc:	40012708 	.word	0x40012708
 8000fe0:	ffc3ffff 	.word	0xffc3ffff
 8000fe4:	fdffffff 	.word	0xfdffffff
 8000fe8:	fffe0219 	.word	0xfffe0219
 8000fec:	fffffc03 	.word	0xfffffc03

08000ff0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2250      	movs	r2, #80	; 0x50
 8000ffe:	5c9b      	ldrb	r3, [r3, r2]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x18>
 8001004:	2302      	movs	r3, #2
 8001006:	e050      	b.n	80010aa <HAL_ADC_ConfigChannel+0xba>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2250      	movs	r2, #80	; 0x50
 800100c:	2101      	movs	r1, #1
 800100e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2204      	movs	r2, #4
 8001018:	4013      	ands	r3, r2
 800101a:	d00b      	beq.n	8001034 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001020:	2220      	movs	r2, #32
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2250      	movs	r2, #80	; 0x50
 800102c:	2100      	movs	r1, #0
 800102e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e03a      	b.n	80010aa <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <HAL_ADC_ConfigChannel+0xc4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d018      	beq.n	8001070 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	035b      	lsls	r3, r3, #13
 800104a:	0b5a      	lsrs	r2, r3, #13
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	029b      	lsls	r3, r3, #10
 800105c:	4013      	ands	r3, r2
 800105e:	d01f      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_ADC_ConfigChannel+0xc8>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_ADC_ConfigChannel+0xc8>)
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	03c9      	lsls	r1, r1, #15
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e017      	b.n	80010a0 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	035b      	lsls	r3, r3, #13
 800107c:	0b5b      	lsrs	r3, r3, #13
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	400a      	ands	r2, r1
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	d005      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_ADC_ConfigChannel+0xc8>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HAL_ADC_ConfigChannel+0xc8>)
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <HAL_ADC_ConfigChannel+0xcc>)
 800109c:	400a      	ands	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2250      	movs	r2, #80	; 0x50
 80010a4:	2100      	movs	r1, #0
 80010a6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	00001001 	.word	0x00001001
 80010b8:	40012708 	.word	0x40012708
 80010bc:	ffbfffff 	.word	0xffbfffff

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	0002      	movs	r2, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b7f      	cmp	r3, #127	; 0x7f
 80010d4:	d828      	bhi.n	8001128 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d6:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <__NVIC_SetPriority+0xd4>)
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	33c0      	adds	r3, #192	; 0xc0
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	589b      	ldr	r3, [r3, r2]
 80010e6:	1dfa      	adds	r2, r7, #7
 80010e8:	7812      	ldrb	r2, [r2, #0]
 80010ea:	0011      	movs	r1, r2
 80010ec:	2203      	movs	r2, #3
 80010ee:	400a      	ands	r2, r1
 80010f0:	00d2      	lsls	r2, r2, #3
 80010f2:	21ff      	movs	r1, #255	; 0xff
 80010f4:	4091      	lsls	r1, r2
 80010f6:	000a      	movs	r2, r1
 80010f8:	43d2      	mvns	r2, r2
 80010fa:	401a      	ands	r2, r3
 80010fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	019b      	lsls	r3, r3, #6
 8001102:	22ff      	movs	r2, #255	; 0xff
 8001104:	401a      	ands	r2, r3
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	0018      	movs	r0, r3
 800110c:	2303      	movs	r3, #3
 800110e:	4003      	ands	r3, r0
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001114:	481f      	ldr	r0, [pc, #124]	; (8001194 <__NVIC_SetPriority+0xd4>)
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b25b      	sxtb	r3, r3
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	430a      	orrs	r2, r1
 8001120:	33c0      	adds	r3, #192	; 0xc0
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001126:	e031      	b.n	800118c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <__NVIC_SetPriority+0xd8>)
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0019      	movs	r1, r3
 8001130:	230f      	movs	r3, #15
 8001132:	400b      	ands	r3, r1
 8001134:	3b08      	subs	r3, #8
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3306      	adds	r3, #6
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	18d3      	adds	r3, r2, r3
 800113e:	3304      	adds	r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	1dfa      	adds	r2, r7, #7
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	0011      	movs	r1, r2
 8001148:	2203      	movs	r2, #3
 800114a:	400a      	ands	r2, r1
 800114c:	00d2      	lsls	r2, r2, #3
 800114e:	21ff      	movs	r1, #255	; 0xff
 8001150:	4091      	lsls	r1, r2
 8001152:	000a      	movs	r2, r1
 8001154:	43d2      	mvns	r2, r2
 8001156:	401a      	ands	r2, r3
 8001158:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	019b      	lsls	r3, r3, #6
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	401a      	ands	r2, r3
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	0018      	movs	r0, r3
 8001168:	2303      	movs	r3, #3
 800116a:	4003      	ands	r3, r0
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <__NVIC_SetPriority+0xd8>)
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	001c      	movs	r4, r3
 8001178:	230f      	movs	r3, #15
 800117a:	4023      	ands	r3, r4
 800117c:	3b08      	subs	r3, #8
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	430a      	orrs	r2, r1
 8001182:	3306      	adds	r3, #6
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	18c3      	adds	r3, r0, r3
 8001188:	3304      	adds	r3, #4
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b003      	add	sp, #12
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1e5a      	subs	r2, r3, #1
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	045b      	lsls	r3, r3, #17
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d301      	bcc.n	80011b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b0:	2301      	movs	r3, #1
 80011b2:	e010      	b.n	80011d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <SysTick_Config+0x44>)
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	3a01      	subs	r2, #1
 80011ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011bc:	2301      	movs	r3, #1
 80011be:	425b      	negs	r3, r3
 80011c0:	2103      	movs	r1, #3
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff ff7c 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x44>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x44>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	210f      	movs	r1, #15
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	1c02      	adds	r2, r0, #0
 80011f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b004      	add	sp, #16
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff ffbf 	bl	800119c <SysTick_Config>
 800121e:	0003      	movs	r3, r0
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800123e:	e143      	b.n	80014c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d100      	bne.n	8001258 <HAL_GPIO_Init+0x30>
 8001256:	e134      	b.n	80014c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	4013      	ands	r3, r2
 8001260:	2b01      	cmp	r3, #1
 8001262:	d005      	beq.n	8001270 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800126c:	2b02      	cmp	r3, #2
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	43da      	mvns	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	409a      	lsls	r2, r3
 8001292:	0013      	movs	r3, r2
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	2201      	movs	r2, #1
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2203      	movs	r2, #3
 80012d8:	4013      	ands	r3, r2
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d017      	beq.n	800130e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2203      	movs	r2, #3
 8001314:	4013      	ands	r3, r2
 8001316:	2b02      	cmp	r3, #2
 8001318:	d123      	bne.n	8001362 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	58d3      	ldr	r3, [r2, r3]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2207      	movs	r2, #7
 800132c:	4013      	ands	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2107      	movs	r1, #7
 8001346:	400b      	ands	r3, r1
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	401a      	ands	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	23c0      	movs	r3, #192	; 0xc0
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	4013      	ands	r3, r2
 80013a0:	d100      	bne.n	80013a4 <HAL_GPIO_Init+0x17c>
 80013a2:	e08e      	b.n	80014c2 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a4:	4b4e      	ldr	r3, [pc, #312]	; (80014e0 <HAL_GPIO_Init+0x2b8>)
 80013a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a8:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <HAL_GPIO_Init+0x2b8>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b0:	4a4c      	ldr	r2, [pc, #304]	; (80014e4 <HAL_GPIO_Init+0x2bc>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	589b      	ldr	r3, [r3, r2]
 80013bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2203      	movs	r2, #3
 80013c2:	4013      	ands	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	409a      	lsls	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	23a0      	movs	r3, #160	; 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	429a      	cmp	r2, r3
 80013dc:	d00d      	beq.n	80013fa <HAL_GPIO_Init+0x1d2>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a41      	ldr	r2, [pc, #260]	; (80014e8 <HAL_GPIO_Init+0x2c0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x1ce>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a40      	ldr	r2, [pc, #256]	; (80014ec <HAL_GPIO_Init+0x2c4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_GPIO_Init+0x1ca>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x1d4>
 80013f2:	2306      	movs	r3, #6
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x1d4>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x1d4>
 80013fa:	2300      	movs	r3, #0
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	2103      	movs	r1, #3
 8001400:	400a      	ands	r2, r1
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <HAL_GPIO_Init+0x2bc>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141a:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	025b      	lsls	r3, r3, #9
 8001432:	4013      	ands	r3, r2
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43da      	mvns	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	029b      	lsls	r3, r3, #10
 800145c:	4013      	ands	r3, r2
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	035b      	lsls	r3, r3, #13
 8001486:	4013      	ands	r3, r2
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	40da      	lsrs	r2, r3
 80014d0:	1e13      	subs	r3, r2, #0
 80014d2:	d000      	beq.n	80014d6 <HAL_GPIO_Init+0x2ae>
 80014d4:	e6b4      	b.n	8001240 <HAL_GPIO_Init+0x18>
  }
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b006      	add	sp, #24
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	50000400 	.word	0x50000400
 80014ec:	50000800 	.word	0x50000800
 80014f0:	40010400 	.word	0x40010400

080014f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e082      	b.n	800160c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2241      	movs	r2, #65	; 0x41
 800150a:	5c9b      	ldrb	r3, [r3, r2]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d107      	bne.n	8001522 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2240      	movs	r2, #64	; 0x40
 8001516:	2100      	movs	r1, #0
 8001518:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff fa35 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2241      	movs	r2, #65	; 0x41
 8001526:	2124      	movs	r1, #36	; 0x24
 8001528:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2101      	movs	r1, #1
 8001536:	438a      	bics	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4934      	ldr	r1, [pc, #208]	; (8001614 <HAL_I2C_Init+0x120>)
 8001544:	400a      	ands	r2, r1
 8001546:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4931      	ldr	r1, [pc, #196]	; (8001618 <HAL_I2C_Init+0x124>)
 8001554:	400a      	ands	r2, r1
 8001556:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d108      	bne.n	8001572 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0209      	lsls	r1, r1, #8
 800156c:	430a      	orrs	r2, r1
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	e007      	b.n	8001582 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2184      	movs	r1, #132	; 0x84
 800157c:	0209      	lsls	r1, r1, #8
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d104      	bne.n	8001594 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	491f      	ldr	r1, [pc, #124]	; (800161c <HAL_I2C_Init+0x128>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	491a      	ldr	r1, [pc, #104]	; (8001618 <HAL_I2C_Init+0x124>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	431a      	orrs	r2, r3
 80015be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69d9      	ldr	r1, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2101      	movs	r1, #1
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2241      	movs	r2, #65	; 0x41
 80015f8:	2120      	movs	r1, #32
 80015fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2242      	movs	r2, #66	; 0x42
 8001606:	2100      	movs	r1, #0
 8001608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}
 8001614:	f0ffffff 	.word	0xf0ffffff
 8001618:	ffff7fff 	.word	0xffff7fff
 800161c:	02008000 	.word	0x02008000

08001620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2241      	movs	r2, #65	; 0x41
 800162e:	5c9b      	ldrb	r3, [r3, r2]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b20      	cmp	r3, #32
 8001634:	d138      	bne.n	80016a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	5c9b      	ldrb	r3, [r3, r2]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001640:	2302      	movs	r3, #2
 8001642:	e032      	b.n	80016aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	2101      	movs	r1, #1
 800164a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2241      	movs	r2, #65	; 0x41
 8001650:	2124      	movs	r1, #36	; 0x24
 8001652:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2101      	movs	r1, #1
 8001660:	438a      	bics	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001670:	400a      	ands	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2101      	movs	r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2241      	movs	r2, #65	; 0x41
 8001698:	2120      	movs	r1, #32
 800169a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2240      	movs	r2, #64	; 0x40
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e000      	b.n	80016aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016a8:	2302      	movs	r3, #2
  }
}
 80016aa:	0018      	movs	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	ffffefff 	.word	0xffffefff

080016b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2241      	movs	r2, #65	; 0x41
 80016c6:	5c9b      	ldrb	r3, [r3, r2]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d139      	bne.n	8001742 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2240      	movs	r2, #64	; 0x40
 80016d2:	5c9b      	ldrb	r3, [r3, r2]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016d8:	2302      	movs	r3, #2
 80016da:	e033      	b.n	8001744 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2240      	movs	r2, #64	; 0x40
 80016e0:	2101      	movs	r1, #1
 80016e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2241      	movs	r2, #65	; 0x41
 80016e8:	2124      	movs	r1, #36	; 0x24
 80016ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2101      	movs	r1, #1
 80016f8:	438a      	bics	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2241      	movs	r2, #65	; 0x41
 8001732:	2120      	movs	r1, #32
 8001734:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2240      	movs	r2, #64	; 0x40
 800173a:	2100      	movs	r1, #0
 800173c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001742:	2302      	movs	r3, #2
  }
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b004      	add	sp, #16
 800174a:	bd80      	pop	{r7, pc}
 800174c:	fffff0ff 	.word	0xfffff0ff

08001750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	f000 fb6c 	bl	8001e3c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001764:	4bc8      	ldr	r3, [pc, #800]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	220c      	movs	r2, #12
 800176a:	4013      	ands	r3, r2
 800176c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176e:	4bc6      	ldr	r3, [pc, #792]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	025b      	lsls	r3, r3, #9
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	d100      	bne.n	8001786 <HAL_RCC_OscConfig+0x36>
 8001784:	e07d      	b.n	8001882 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2b08      	cmp	r3, #8
 800178a:	d007      	beq.n	800179c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d112      	bne.n	80017b8 <HAL_RCC_OscConfig+0x68>
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	429a      	cmp	r2, r3
 800179a:	d10d      	bne.n	80017b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	4bba      	ldr	r3, [pc, #744]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	4013      	ands	r3, r2
 80017a6:	d100      	bne.n	80017aa <HAL_RCC_OscConfig+0x5a>
 80017a8:	e06a      	b.n	8001880 <HAL_RCC_OscConfig+0x130>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d166      	bne.n	8001880 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f000 fb42 	bl	8001e3c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	025b      	lsls	r3, r3, #9
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x84>
 80017c4:	4bb0      	ldr	r3, [pc, #704]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4baf      	ldr	r3, [pc, #700]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	0249      	lsls	r1, r1, #9
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e027      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	23a0      	movs	r3, #160	; 0xa0
 80017da:	02db      	lsls	r3, r3, #11
 80017dc:	429a      	cmp	r2, r3
 80017de:	d10e      	bne.n	80017fe <HAL_RCC_OscConfig+0xae>
 80017e0:	4ba9      	ldr	r3, [pc, #676]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4ba8      	ldr	r3, [pc, #672]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	02c9      	lsls	r1, r1, #11
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	4ba6      	ldr	r3, [pc, #664]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4ba5      	ldr	r3, [pc, #660]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0249      	lsls	r1, r1, #9
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e012      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 80017fe:	4ba2      	ldr	r3, [pc, #648]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4ba1      	ldr	r3, [pc, #644]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001804:	49a1      	ldr	r1, [pc, #644]	; (8001a8c <HAL_RCC_OscConfig+0x33c>)
 8001806:	400a      	ands	r2, r1
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	4b9f      	ldr	r3, [pc, #636]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	4013      	ands	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4b9b      	ldr	r3, [pc, #620]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b9a      	ldr	r3, [pc, #616]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800181e:	499c      	ldr	r1, [pc, #624]	; (8001a90 <HAL_RCC_OscConfig+0x340>)
 8001820:	400a      	ands	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d014      	beq.n	8001856 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fa62 	bl	8000cf4 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001836:	f7ff fa5d 	bl	8000cf4 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b64      	cmp	r3, #100	; 0x64
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e2f9      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001848:	4b8f      	ldr	r3, [pc, #572]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	029b      	lsls	r3, r3, #10
 8001850:	4013      	ands	r3, r2
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0xe6>
 8001854:	e015      	b.n	8001882 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fa4d 	bl	8000cf4 <HAL_GetTick>
 800185a:	0003      	movs	r3, r0
 800185c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fa48 	bl	8000cf4 <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e2e4      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001872:	4b85      	ldr	r3, [pc, #532]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	029b      	lsls	r3, r3, #10
 800187a:	4013      	ands	r3, r2
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x110>
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d100      	bne.n	800188e <HAL_RCC_OscConfig+0x13e>
 800188c:	e099      	b.n	80019c2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	2220      	movs	r2, #32
 8001898:	4013      	ands	r3, r2
 800189a:	d009      	beq.n	80018b0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800189c:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b79      	ldr	r3, [pc, #484]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80018a2:	2120      	movs	r1, #32
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	2220      	movs	r2, #32
 80018ac:	4393      	bics	r3, r2
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d13e      	bne.n	800193a <HAL_RCC_OscConfig+0x1ea>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d13b      	bne.n	800193a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80018c2:	4b71      	ldr	r3, [pc, #452]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2204      	movs	r2, #4
 80018c8:	4013      	ands	r3, r2
 80018ca:	d004      	beq.n	80018d6 <HAL_RCC_OscConfig+0x186>
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e2b2      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4b6c      	ldr	r3, [pc, #432]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a6e      	ldr	r2, [pc, #440]	; (8001a94 <HAL_RCC_OscConfig+0x344>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	021a      	lsls	r2, r3, #8
 80018e6:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80018ec:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2209      	movs	r2, #9
 80018f2:	4393      	bics	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80018f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 fc4f 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8001902:	0001      	movs	r1, r0
 8001904:	4b60      	ldr	r3, [pc, #384]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	220f      	movs	r2, #15
 800190c:	4013      	ands	r3, r2
 800190e:	4a62      	ldr	r2, [pc, #392]	; (8001a98 <HAL_RCC_OscConfig+0x348>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	000a      	movs	r2, r1
 8001914:	40da      	lsrs	r2, r3
 8001916:	4b61      	ldr	r3, [pc, #388]	; (8001a9c <HAL_RCC_OscConfig+0x34c>)
 8001918:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <HAL_RCC_OscConfig+0x350>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2513      	movs	r5, #19
 8001920:	197c      	adds	r4, r7, r5
 8001922:	0018      	movs	r0, r3
 8001924:	f7ff f9a0 	bl	8000c68 <HAL_InitTick>
 8001928:	0003      	movs	r3, r0
 800192a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800192c:	197b      	adds	r3, r7, r5
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d046      	beq.n	80019c2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001934:	197b      	adds	r3, r7, r5
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	e280      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	2b00      	cmp	r3, #0
 800193e:	d027      	beq.n	8001990 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001940:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2209      	movs	r2, #9
 8001946:	4393      	bics	r3, r2
 8001948:	0019      	movs	r1, r3
 800194a:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800194c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff f9cf 	bl	8000cf4 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195c:	f7ff f9ca 	bl	8000cf4 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e266      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2204      	movs	r2, #4
 8001974:	4013      	ands	r3, r2
 8001976:	d0f1      	beq.n	800195c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a45      	ldr	r2, [pc, #276]	; (8001a94 <HAL_RCC_OscConfig+0x344>)
 800197e:	4013      	ands	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	021a      	lsls	r2, r3, #8
 8001988:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e018      	b.n	80019c2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001990:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001996:	2101      	movs	r1, #1
 8001998:	438a      	bics	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f9aa 	bl	8000cf4 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff f9a5 	bl	8000cf4 <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e241      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2204      	movs	r2, #4
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f1      	bne.n	80019a6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2210      	movs	r2, #16
 80019c8:	4013      	ands	r3, r2
 80019ca:	d100      	bne.n	80019ce <HAL_RCC_OscConfig+0x27e>
 80019cc:	e0a1      	b.n	8001b12 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d140      	bne.n	8001a56 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d4:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x29c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e227      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a2c      	ldr	r2, [pc, #176]	; (8001aa4 <HAL_RCC_OscConfig+0x354>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	0019      	movs	r1, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1a      	ldr	r2, [r3, #32]
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 80019fc:	430a      	orrs	r2, r1
 80019fe:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	0a19      	lsrs	r1, r3, #8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	0b5b      	lsrs	r3, r3, #13
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	0212      	lsls	r2, r2, #8
 8001a20:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	210f      	movs	r1, #15
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	491a      	ldr	r1, [pc, #104]	; (8001a98 <HAL_RCC_OscConfig+0x348>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_RCC_OscConfig+0x34c>)
 8001a34:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_RCC_OscConfig+0x350>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2513      	movs	r5, #19
 8001a3c:	197c      	adds	r4, r7, r5
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff f912 	bl	8000c68 <HAL_InitTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a48:	197b      	adds	r3, r7, r5
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d060      	beq.n	8001b12 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001a50:	197b      	adds	r3, r7, r5
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	e1f2      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d03f      	beq.n	8001ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_OscConfig+0x338>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	0049      	lsls	r1, r1, #1
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f942 	bl	8000cf4 <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a74:	e018      	b.n	8001aa8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a76:	f7ff f93d 	bl	8000cf4 <HAL_GetTick>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d911      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1d9      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	fffeffff 	.word	0xfffeffff
 8001a90:	fffbffff 	.word	0xfffbffff
 8001a94:	ffffe0ff 	.word	0xffffe0ff
 8001a98:	08003010 	.word	0x08003010
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aa8:	4bc9      	ldr	r3, [pc, #804]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0e0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab4:	4bc6      	ldr	r3, [pc, #792]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4ac6      	ldr	r2, [pc, #792]	; (8001dd4 <HAL_RCC_OscConfig+0x684>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	4bc3      	ldr	r3, [pc, #780]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac8:	4bc1      	ldr	r3, [pc, #772]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	0a19      	lsrs	r1, r3, #8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	061a      	lsls	r2, r3, #24
 8001ad6:	4bbe      	ldr	r3, [pc, #760]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	e019      	b.n	8001b12 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ade:	4bbc      	ldr	r3, [pc, #752]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4bbb      	ldr	r3, [pc, #748]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001ae4:	49bc      	ldr	r1, [pc, #752]	; (8001dd8 <HAL_RCC_OscConfig+0x688>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff f903 	bl	8000cf4 <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af4:	f7ff f8fe 	bl	8000cf4 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e19a      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b06:	4bb2      	ldr	r3, [pc, #712]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2208      	movs	r2, #8
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d036      	beq.n	8001b8a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d019      	beq.n	8001b58 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b24:	4baa      	ldr	r3, [pc, #680]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b28:	4ba9      	ldr	r3, [pc, #676]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff f8e0 	bl	8000cf4 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3a:	f7ff f8db 	bl	8000cf4 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e177      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b4c:	4ba0      	ldr	r3, [pc, #640]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b50:	2202      	movs	r2, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	d0f1      	beq.n	8001b3a <HAL_RCC_OscConfig+0x3ea>
 8001b56:	e018      	b.n	8001b8a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b58:	4b9d      	ldr	r3, [pc, #628]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001b5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b5c:	4b9c      	ldr	r3, [pc, #624]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	438a      	bics	r2, r1
 8001b62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff f8c6 	bl	8000cf4 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7ff f8c1 	bl	8000cf4 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e15d      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b80:	4b93      	ldr	r3, [pc, #588]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d1f1      	bne.n	8001b6e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	4013      	ands	r3, r2
 8001b92:	d100      	bne.n	8001b96 <HAL_RCC_OscConfig+0x446>
 8001b94:	e0ae      	b.n	8001cf4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b96:	2023      	movs	r0, #35	; 0x23
 8001b98:	183b      	adds	r3, r7, r0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4b8c      	ldr	r3, [pc, #560]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	055b      	lsls	r3, r3, #21
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b89      	ldr	r3, [pc, #548]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bae:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0549      	lsls	r1, r1, #21
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001bb8:	183b      	adds	r3, r7, r0
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbe:	4b87      	ldr	r3, [pc, #540]	; (8001ddc <HAL_RCC_OscConfig+0x68c>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d11a      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bca:	4b84      	ldr	r3, [pc, #528]	; (8001ddc <HAL_RCC_OscConfig+0x68c>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b83      	ldr	r3, [pc, #524]	; (8001ddc <HAL_RCC_OscConfig+0x68c>)
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	0049      	lsls	r1, r1, #1
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f88c 	bl	8000cf4 <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7ff f887 	bl	8000cf4 <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	; 0x64
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e123      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b79      	ldr	r3, [pc, #484]	; (8001ddc <HAL_RCC_OscConfig+0x68c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4cc>
 8001c0c:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	0049      	lsls	r1, r1, #1
 8001c16:	430a      	orrs	r2, r1
 8001c18:	651a      	str	r2, [r3, #80]	; 0x50
 8001c1a:	e031      	b.n	8001c80 <HAL_RCC_OscConfig+0x530>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4ee>
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c28:	4b69      	ldr	r3, [pc, #420]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c2a:	496b      	ldr	r1, [pc, #428]	; (8001dd8 <HAL_RCC_OscConfig+0x688>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c30:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c34:	4b66      	ldr	r3, [pc, #408]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c36:	496a      	ldr	r1, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x690>)
 8001c38:	400a      	ands	r2, r1
 8001c3a:	651a      	str	r2, [r3, #80]	; 0x50
 8001c3c:	e020      	b.n	8001c80 <HAL_RCC_OscConfig+0x530>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	23a0      	movs	r3, #160	; 0xa0
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d10e      	bne.n	8001c68 <HAL_RCC_OscConfig+0x518>
 8001c4a:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4e:	4b60      	ldr	r3, [pc, #384]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	00c9      	lsls	r1, r1, #3
 8001c54:	430a      	orrs	r2, r1
 8001c56:	651a      	str	r2, [r3, #80]	; 0x50
 8001c58:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c5c:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c5e:	2180      	movs	r1, #128	; 0x80
 8001c60:	0049      	lsls	r1, r1, #1
 8001c62:	430a      	orrs	r2, r1
 8001c64:	651a      	str	r2, [r3, #80]	; 0x50
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0x530>
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c6c:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c6e:	495a      	ldr	r1, [pc, #360]	; (8001dd8 <HAL_RCC_OscConfig+0x688>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	651a      	str	r2, [r3, #80]	; 0x50
 8001c74:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c78:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001c7a:	4959      	ldr	r1, [pc, #356]	; (8001de0 <HAL_RCC_OscConfig+0x690>)
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7ff f834 	bl	8000cf4 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7ff f82f 	bl	8000cf4 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4a51      	ldr	r2, [pc, #324]	; (8001de4 <HAL_RCC_OscConfig+0x694>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e0ca      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001ca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0ef      	beq.n	8001c92 <HAL_RCC_OscConfig+0x542>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f81e 	bl	8000cf4 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cbc:	e009      	b.n	8001cd2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbe:	f7ff f819 	bl	8000cf4 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4a46      	ldr	r2, [pc, #280]	; (8001de4 <HAL_RCC_OscConfig+0x694>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0b4      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1ef      	bne.n	8001cbe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cde:	2323      	movs	r3, #35	; 0x23
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001cee:	493e      	ldr	r1, [pc, #248]	; (8001de8 <HAL_RCC_OscConfig+0x698>)
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d100      	bne.n	8001cfe <HAL_RCC_OscConfig+0x5ae>
 8001cfc:	e09d      	b.n	8001e3a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	2b0c      	cmp	r3, #12
 8001d02:	d100      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5b6>
 8001d04:	e076      	b.n	8001df4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d145      	bne.n	8001d9a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001d14:	4935      	ldr	r1, [pc, #212]	; (8001dec <HAL_RCC_OscConfig+0x69c>)
 8001d16:	400a      	ands	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7fe ffeb 	bl	8000cf4 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe ffe6 	bl	8000cf4 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e082      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d36:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	049b      	lsls	r3, r3, #18
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d42:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4a2a      	ldr	r2, [pc, #168]	; (8001df0 <HAL_RCC_OscConfig+0x6a0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	0449      	lsls	r1, r1, #17
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe ffc0 	bl	8000cf4 <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe ffbb 	bl	8000cf4 <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e057      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	049b      	lsls	r3, r3, #18
 8001d94:	4013      	ands	r3, r2
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x62a>
 8001d98:	e04f      	b.n	8001e3a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001da0:	4912      	ldr	r1, [pc, #72]	; (8001dec <HAL_RCC_OscConfig+0x69c>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe ffa5 	bl	8000cf4 <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe ffa0 	bl	8000cf4 <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e03c      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dc2:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_RCC_OscConfig+0x680>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	049b      	lsls	r3, r3, #18
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x660>
 8001dce:	e034      	b.n	8001e3a <HAL_RCC_OscConfig+0x6ea>
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	ffff1fff 	.word	0xffff1fff
 8001dd8:	fffffeff 	.word	0xfffffeff
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	fffffbff 	.word	0xfffffbff
 8001de4:	00001388 	.word	0x00001388
 8001de8:	efffffff 	.word	0xefffffff
 8001dec:	feffffff 	.word	0xfeffffff
 8001df0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e01d      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_RCC_OscConfig+0x6f4>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	025b      	lsls	r3, r3, #9
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d10f      	bne.n	8001e36 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	23f0      	movs	r3, #240	; 0xf0
 8001e1a:	039b      	lsls	r3, r3, #14
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	23c0      	movs	r3, #192	; 0xc0
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b00a      	add	sp, #40	; 0x28
 8001e42:	bdb0      	pop	{r4, r5, r7, pc}
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e128      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b96      	ldr	r3, [pc, #600]	; (80020b8 <HAL_RCC_ClockConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d91e      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b93      	ldr	r3, [pc, #588]	; (80020b8 <HAL_RCC_ClockConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4393      	bics	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	4b90      	ldr	r3, [pc, #576]	; (80020b8 <HAL_RCC_ClockConfig+0x270>)
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e7c:	f7fe ff3a 	bl	8000cf4 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e84:	e009      	b.n	8001e9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e86:	f7fe ff35 	bl	8000cf4 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a8a      	ldr	r2, [pc, #552]	; (80020bc <HAL_RCC_ClockConfig+0x274>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e109      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b87      	ldr	r3, [pc, #540]	; (80020b8 <HAL_RCC_ClockConfig+0x270>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2202      	movs	r2, #2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb2:	4b83      	ldr	r3, [pc, #524]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	22f0      	movs	r2, #240	; 0xf0
 8001eb8:	4393      	bics	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	4b7f      	ldr	r3, [pc, #508]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x8a>
 8001ed0:	e089      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eda:	4b79      	ldr	r3, [pc, #484]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d120      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0e1      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ef2:	4b73      	ldr	r3, [pc, #460]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	049b      	lsls	r3, r3, #18
 8001efa:	4013      	ands	r3, r2
 8001efc:	d114      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0d5      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	4013      	ands	r3, r2
 8001f12:	d109      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0ca      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f18:	4b69      	ldr	r3, [pc, #420]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0c2      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f28:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	4393      	bics	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4b62      	ldr	r3, [pc, #392]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3c:	f7fe feda 	bl	8000cf4 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d111      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f4c:	e009      	b.n	8001f62 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4e:	f7fe fed1 	bl	8000cf4 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_ClockConfig+0x274>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e0a5      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	220c      	movs	r2, #12
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d1ef      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x106>
 8001f6e:	e03a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d111      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f78:	e009      	b.n	8001f8e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7a:	f7fe febb 	bl	8000cf4 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4a4d      	ldr	r2, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x274>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e08f      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8e:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	220c      	movs	r2, #12
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d1ef      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x132>
 8001f9a:	e024      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d11b      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa4:	e009      	b.n	8001fba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa6:	f7fe fea5 	bl	8000cf4 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	4a42      	ldr	r2, [pc, #264]	; (80020bc <HAL_RCC_ClockConfig+0x274>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e079      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d1ef      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x15e>
 8001fc6:	e00e      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7fe fe94 	bl	8000cf4 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	4a3a      	ldr	r2, [pc, #232]	; (80020bc <HAL_RCC_ClockConfig+0x274>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e068      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fdc:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	220c      	movs	r2, #12
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_ClockConfig+0x270>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2201      	movs	r2, #1
 8001fec:	4013      	ands	r3, r2
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d21e      	bcs.n	8002032 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCC_ClockConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4393      	bics	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_RCC_ClockConfig+0x270>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002006:	f7fe fe75 	bl	8000cf4 <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	e009      	b.n	8002024 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe fe70 	bl	8000cf4 <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	4a28      	ldr	r2, [pc, #160]	; (80020bc <HAL_RCC_ClockConfig+0x274>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e044      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x270>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d1ee      	bne.n	8002010 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2204      	movs	r2, #4
 8002038:	4013      	ands	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <HAL_RCC_ClockConfig+0x27c>)
 8002042:	4013      	ands	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 800204c:	430a      	orrs	r2, r1
 800204e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2208      	movs	r2, #8
 8002056:	4013      	ands	r3, r2
 8002058:	d00a      	beq.n	8002070 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <HAL_RCC_ClockConfig+0x280>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	00da      	lsls	r2, r3, #3
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 800206c:	430a      	orrs	r2, r1
 800206e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002070:	f000 f896 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8002074:	0001      	movs	r1, r0
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_RCC_ClockConfig+0x278>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	220f      	movs	r2, #15
 800207e:	4013      	ands	r3, r2
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <HAL_RCC_ClockConfig+0x284>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	000a      	movs	r2, r1
 8002086:	40da      	lsrs	r2, r3
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_RCC_ClockConfig+0x288>)
 800208a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_RCC_ClockConfig+0x28c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	250b      	movs	r5, #11
 8002092:	197c      	adds	r4, r7, r5
 8002094:	0018      	movs	r0, r3
 8002096:	f7fe fde7 	bl	8000c68 <HAL_InitTick>
 800209a:	0003      	movs	r3, r0
 800209c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800209e:	197b      	adds	r3, r7, r5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80020a6:	197b      	adds	r3, r7, r5
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	e000      	b.n	80020ae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b004      	add	sp, #16
 80020b4:	bdb0      	pop	{r4, r5, r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	40022000 	.word	0x40022000
 80020bc:	00001388 	.word	0x00001388
 80020c0:	40021000 	.word	0x40021000
 80020c4:	fffff8ff 	.word	0xfffff8ff
 80020c8:	ffffc7ff 	.word	0xffffc7ff
 80020cc:	08003010 	.word	0x08003010
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b08d      	sub	sp, #52	; 0x34
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 80020e4:	241c      	movs	r4, #28
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	0018      	movs	r0, r3
 80020ea:	2314      	movs	r3, #20
 80020ec:	001a      	movs	r2, r3
 80020ee:	2100      	movs	r1, #0
 80020f0:	f000 ff7a 	bl	8002fe8 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80020f4:	0020      	movs	r0, r4
 80020f6:	183b      	adds	r3, r7, r0
 80020f8:	2202      	movs	r2, #2
 80020fa:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80020fc:	183b      	adds	r3, r7, r0
 80020fe:	2202      	movs	r2, #2
 8002100:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8002102:	183b      	adds	r3, r7, r0
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11a      	bne.n	8002144 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 800210e:	183b      	adds	r3, r7, r0
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	0052      	lsls	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002116:	183b      	adds	r3, r7, r0
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_RCC_MCOConfig+0xc0>)
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_MCOConfig+0xc0>)
 8002122:	2101      	movs	r1, #1
 8002124:	430a      	orrs	r2, r1
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_RCC_MCOConfig+0xc0>)
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	2201      	movs	r2, #1
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002134:	183a      	adds	r2, r7, r0
 8002136:	23a0      	movs	r3, #160	; 0xa0
 8002138:	05db      	lsls	r3, r3, #23
 800213a:	0011      	movs	r1, r2
 800213c:	0018      	movs	r0, r3
 800213e:	f7ff f873 	bl	8001228 <HAL_GPIO_Init>
 8002142:	e01a      	b.n	800217a <HAL_RCC_MCOConfig+0xa2>
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 8002144:	201c      	movs	r0, #28
 8002146:	183b      	adds	r3, r7, r0
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	0092      	lsls	r2, r2, #2
 800214c:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 800214e:	183b      	adds	r3, r7, r0
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_RCC_MCOConfig+0xc0>)
 8002156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_RCC_MCOConfig+0xc0>)
 800215a:	2101      	movs	r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCC_MCOConfig+0xc0>)
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	2201      	movs	r2, #1
 8002166:	4013      	ands	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 800216c:	183a      	adds	r2, r7, r0
 800216e:	23a0      	movs	r3, #160	; 0xa0
 8002170:	05db      	lsls	r3, r3, #23
 8002172:	0011      	movs	r1, r2
 8002174:	0018      	movs	r0, r3
 8002176:	f7ff f857 	bl	8001228 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_RCC_MCOConfig+0xc0>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_RCC_MCOConfig+0xc4>)
 8002180:	4013      	ands	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	431a      	orrs	r2, r3
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_RCC_MCOConfig+0xc0>)
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b00d      	add	sp, #52	; 0x34
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	80ffffff 	.word	0x80ffffff

080021a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80021a6:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ae:	230c      	movs	r3, #12
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d014      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x40>
 80021b6:	d900      	bls.n	80021ba <HAL_RCC_GetSysClockFreq+0x1a>
 80021b8:	e07b      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x112>
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d002      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x24>
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d00b      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x3a>
 80021c2:	e076      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021c4:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2210      	movs	r2, #16
 80021ca:	4013      	ands	r3, r2
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_GetSysClockFreq+0x13c>)
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80021d2:	e07c      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80021d4:	4b42      	ldr	r3, [pc, #264]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x140>)
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021d8:	e079      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021da:	4b40      	ldr	r3, [pc, #256]	; (80022dc <HAL_RCC_GetSysClockFreq+0x13c>)
 80021dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021de:	e076      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e2:	0c9a      	lsrs	r2, r3, #18
 80021e4:	230f      	movs	r3, #15
 80021e6:	401a      	ands	r2, r3
 80021e8:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x144>)
 80021ea:	5c9b      	ldrb	r3, [r3, r2]
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	0d9a      	lsrs	r2, r3, #22
 80021f2:	2303      	movs	r3, #3
 80021f4:	4013      	ands	r3, r2
 80021f6:	3301      	adds	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fa:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	025b      	lsls	r3, r3, #9
 8002202:	4013      	ands	r3, r2
 8002204:	d01a      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	4a33      	ldr	r2, [pc, #204]	; (80022dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002210:	2300      	movs	r3, #0
 8002212:	69b8      	ldr	r0, [r7, #24]
 8002214:	69f9      	ldr	r1, [r7, #28]
 8002216:	f7fe f823 	bl	8000260 <__aeabi_lmul>
 800221a:	0002      	movs	r2, r0
 800221c:	000b      	movs	r3, r1
 800221e:	0010      	movs	r0, r2
 8002220:	0019      	movs	r1, r3
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f7fd fff7 	bl	8000220 <__aeabi_uldivmod>
 8002232:	0002      	movs	r2, r0
 8002234:	000b      	movs	r3, r1
 8002236:	0013      	movs	r3, r2
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
 800223a:	e037      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x138>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2210      	movs	r2, #16
 8002242:	4013      	ands	r3, r2
 8002244:	d01a      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002250:	2300      	movs	r3, #0
 8002252:	68b8      	ldr	r0, [r7, #8]
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	f7fe f803 	bl	8000260 <__aeabi_lmul>
 800225a:	0002      	movs	r2, r0
 800225c:	000b      	movs	r3, r1
 800225e:	0010      	movs	r0, r2
 8002260:	0019      	movs	r1, r3
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f7fd ffd7 	bl	8000220 <__aeabi_uldivmod>
 8002272:	0002      	movs	r2, r0
 8002274:	000b      	movs	r3, r1
 8002276:	0013      	movs	r3, r2
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
 800227a:	e017      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	0018      	movs	r0, r3
 8002280:	2300      	movs	r3, #0
 8002282:	0019      	movs	r1, r3
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002286:	2300      	movs	r3, #0
 8002288:	f7fd ffea 	bl	8000260 <__aeabi_lmul>
 800228c:	0002      	movs	r2, r0
 800228e:	000b      	movs	r3, r1
 8002290:	0010      	movs	r0, r2
 8002292:	0019      	movs	r1, r3
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	001c      	movs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	001d      	movs	r5, r3
 800229c:	0022      	movs	r2, r4
 800229e:	002b      	movs	r3, r5
 80022a0:	f7fd ffbe 	bl	8000220 <__aeabi_uldivmod>
 80022a4:	0002      	movs	r2, r0
 80022a6:	000b      	movs	r3, r1
 80022a8:	0013      	movs	r3, r2
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022b0:	e00d      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0b5b      	lsrs	r3, r3, #13
 80022b8:	2207      	movs	r2, #7
 80022ba:	4013      	ands	r3, r2
 80022bc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	3301      	adds	r3, #1
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	0212      	lsls	r2, r2, #8
 80022c6:	409a      	lsls	r2, r3
 80022c8:	0013      	movs	r3, r2
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022cc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b00e      	add	sp, #56	; 0x38
 80022d6:	bdb0      	pop	{r4, r5, r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	003d0900 	.word	0x003d0900
 80022e0:	00f42400 	.word	0x00f42400
 80022e4:	08003028 	.word	0x08003028

080022e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022ec:	4b02      	ldr	r3, [pc, #8]	; (80022f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	20000000 	.word	0x20000000

080022fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002300:	f7ff fff2 	bl	80022e8 <HAL_RCC_GetHCLKFreq>
 8002304:	0001      	movs	r1, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	2207      	movs	r2, #7
 800230e:	4013      	ands	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	40d9      	lsrs	r1, r3
 8002316:	000b      	movs	r3, r1
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	40021000 	.word	0x40021000
 8002324:	08003020 	.word	0x08003020

08002328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800232c:	f7ff ffdc 	bl	80022e8 <HAL_RCC_GetHCLKFreq>
 8002330:	0001      	movs	r1, r0
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	0adb      	lsrs	r3, r3, #11
 8002338:	2207      	movs	r2, #7
 800233a:	4013      	ands	r3, r2
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	40d9      	lsrs	r1, r3
 8002342:	000b      	movs	r3, r1
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	40021000 	.word	0x40021000
 8002350:	08003020 	.word	0x08003020

08002354 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800235c:	2017      	movs	r0, #23
 800235e:	183b      	adds	r3, r7, r0
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2220      	movs	r2, #32
 800236a:	4013      	ands	r3, r2
 800236c:	d100      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800236e:	e0c2      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002370:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	055b      	lsls	r3, r3, #21
 8002378:	4013      	ands	r3, r2
 800237a:	d109      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b7e      	ldr	r3, [pc, #504]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800237e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002380:	4b7d      	ldr	r3, [pc, #500]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	0549      	lsls	r1, r1, #21
 8002386:	430a      	orrs	r2, r1
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800238a:	183b      	adds	r3, r7, r0
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b7a      	ldr	r3, [pc, #488]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4013      	ands	r3, r2
 800239a:	d11a      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239c:	4b77      	ldr	r3, [pc, #476]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	0049      	lsls	r1, r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fca3 	bl	8000cf4 <HAL_GetTick>
 80023ae:	0003      	movs	r3, r0
 80023b0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	e008      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b4:	f7fe fc9e 	bl	8000cf4 <HAL_GetTick>
 80023b8:	0002      	movs	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0d4      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80023d2:	4b69      	ldr	r3, [pc, #420]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	039b      	lsls	r3, r3, #14
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	039b      	lsls	r3, r3, #14
 80023e6:	4013      	ands	r3, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d013      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	23c0      	movs	r3, #192	; 0xc0
 80023f4:	029b      	lsls	r3, r3, #10
 80023f6:	401a      	ands	r2, r3
 80023f8:	23c0      	movs	r3, #192	; 0xc0
 80023fa:	029b      	lsls	r3, r3, #10
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d10a      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002400:	4b5d      	ldr	r3, [pc, #372]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	029b      	lsls	r3, r3, #10
 8002408:	401a      	ands	r2, r3
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	029b      	lsls	r3, r3, #10
 800240e:	429a      	cmp	r2, r3
 8002410:	d101      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0ac      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002416:	4b58      	ldr	r3, [pc, #352]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800241a:	23c0      	movs	r3, #192	; 0xc0
 800241c:	029b      	lsls	r3, r3, #10
 800241e:	4013      	ands	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03b      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	23c0      	movs	r3, #192	; 0xc0
 800242e:	029b      	lsls	r3, r3, #10
 8002430:	4013      	ands	r3, r2
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	429a      	cmp	r2, r3
 8002436:	d033      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2220      	movs	r2, #32
 800243e:	4013      	ands	r3, r2
 8002440:	d02e      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002442:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	4a4e      	ldr	r2, [pc, #312]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800244e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002450:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0309      	lsls	r1, r1, #12
 8002456:	430a      	orrs	r2, r1
 8002458:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800245c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800245e:	4b46      	ldr	r3, [pc, #280]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002460:	4948      	ldr	r1, [pc, #288]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002462:	400a      	ands	r2, r1
 8002464:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002466:	4b44      	ldr	r3, [pc, #272]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4013      	ands	r3, r2
 8002474:	d014      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fc3d 	bl	8000cf4 <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800247e:	e009      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe fc38 	bl	8000cf4 <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	4a3f      	ldr	r2, [pc, #252]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e06d      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d0ef      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	23c0      	movs	r3, #192	; 0xc0
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	401a      	ands	r2, r3
 80024aa:	23c0      	movs	r3, #192	; 0xc0
 80024ac:	029b      	lsls	r3, r3, #10
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d10c      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a35      	ldr	r2, [pc, #212]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	23c0      	movs	r3, #192	; 0xc0
 80024c2:	039b      	lsls	r3, r3, #14
 80024c4:	401a      	ands	r2, r3
 80024c6:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024ce:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	23c0      	movs	r3, #192	; 0xc0
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	401a      	ands	r2, r3
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024e0:	2317      	movs	r3, #23
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d105      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	4b23      	ldr	r3, [pc, #140]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80024f0:	4927      	ldr	r1, [pc, #156]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2202      	movs	r2, #2
 80024fc:	4013      	ands	r3, r2
 80024fe:	d009      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002504:	220c      	movs	r2, #12
 8002506:	4393      	bics	r3, r2
 8002508:	0019      	movs	r1, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002510:	430a      	orrs	r2, r1
 8002512:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2204      	movs	r2, #4
 800251a:	4013      	ands	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002524:	4013      	ands	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800252e:	430a      	orrs	r2, r1
 8002530:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2208      	movs	r2, #8
 8002538:	4013      	ands	r3, r2
 800253a:	d009      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002540:	4a15      	ldr	r2, [pc, #84]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800254c:	430a      	orrs	r2, r1
 800254e:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	4013      	ands	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	4a0f      	ldr	r2, [pc, #60]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002560:	4013      	ands	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800256a:	430a      	orrs	r2, r1
 800256c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b006      	add	sp, #24
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	40007000 	.word	0x40007000
 8002580:	fffcffff 	.word	0xfffcffff
 8002584:	fff7ffff 	.word	0xfff7ffff
 8002588:	00001388 	.word	0x00001388
 800258c:	ffcfffff 	.word	0xffcfffff
 8002590:	efffffff 	.word	0xefffffff
 8002594:	fffff3ff 	.word	0xfffff3ff
 8002598:	ffffcfff 	.word	0xffffcfff
 800259c:	fff3ffff 	.word	0xfff3ffff

080025a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e07b      	b.n	80026aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	2382      	movs	r3, #130	; 0x82
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d009      	beq.n	80025da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	61da      	str	r2, [r3, #28]
 80025cc:	e005      	b.n	80025da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2251      	movs	r2, #81	; 0x51
 80025e4:	5c9b      	ldrb	r3, [r3, r2]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2250      	movs	r2, #80	; 0x50
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7fe fa0c 	bl	8000a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2251      	movs	r2, #81	; 0x51
 8002600:	2102      	movs	r1, #2
 8002602:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2140      	movs	r1, #64	; 0x40
 8002610:	438a      	bics	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	2382      	movs	r3, #130	; 0x82
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	401a      	ands	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	2384      	movs	r3, #132	; 0x84
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	400b      	ands	r3, r1
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68d9      	ldr	r1, [r3, #12]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	400b      	ands	r3, r1
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2102      	movs	r1, #2
 800263c:	400b      	ands	r3, r1
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2101      	movs	r1, #1
 8002646:	400b      	ands	r3, r1
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6999      	ldr	r1, [r3, #24]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	400b      	ands	r3, r1
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	2138      	movs	r1, #56	; 0x38
 800265c:	400b      	ands	r3, r1
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	400b      	ands	r3, r1
 8002668:	431a      	orrs	r2, r3
 800266a:	0011      	movs	r1, r2
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	019b      	lsls	r3, r3, #6
 8002674:	401a      	ands	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	0c1b      	lsrs	r3, r3, #16
 8002684:	2204      	movs	r2, #4
 8002686:	4013      	ands	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	2210      	movs	r2, #16
 8002690:	401a      	ands	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2251      	movs	r2, #81	; 0x51
 80026a4:	2101      	movs	r1, #1
 80026a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b002      	add	sp, #8
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e044      	b.n	8002750 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d107      	bne.n	80026de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2274      	movs	r2, #116	; 0x74
 80026d2:	2100      	movs	r1, #0
 80026d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fe fa03 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2224      	movs	r2, #36	; 0x24
 80026e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2101      	movs	r1, #1
 80026f0:	438a      	bics	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f830 	bl	800275c <UART_SetConfig>
 80026fc:	0003      	movs	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e024      	b.n	8002750 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 fa85 	bl	8002c20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	490d      	ldr	r1, [pc, #52]	; (8002758 <HAL_UART_Init+0xa4>)
 8002722:	400a      	ands	r2, r1
 8002724:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	212a      	movs	r1, #42	; 0x2a
 8002732:	438a      	bics	r2, r1
 8002734:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2101      	movs	r1, #1
 8002742:	430a      	orrs	r2, r1
 8002744:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	0018      	movs	r0, r3
 800274a:	f000 fb1d 	bl	8002d88 <UART_CheckIdleState>
 800274e:	0003      	movs	r3, r0
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}
 8002758:	ffffb7ff 	.word	0xffffb7ff

0800275c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800275c:	b5b0      	push	{r4, r5, r7, lr}
 800275e:	b08e      	sub	sp, #56	; 0x38
 8002760:	af00      	add	r7, sp, #0
 8002762:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002764:	231a      	movs	r3, #26
 8002766:	2218      	movs	r2, #24
 8002768:	4694      	mov	ip, r2
 800276a:	44bc      	add	ip, r7
 800276c:	4463      	add	r3, ip
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	431a      	orrs	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	431a      	orrs	r2, r3
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4313      	orrs	r3, r2
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4abc      	ldr	r2, [pc, #752]	; (8002a84 <UART_SetConfig+0x328>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4ab8      	ldr	r2, [pc, #736]	; (8002a88 <UART_SetConfig+0x32c>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4ab2      	ldr	r2, [pc, #712]	; (8002a8c <UART_SetConfig+0x330>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d004      	beq.n	80027d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ce:	4313      	orrs	r3, r2
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4aad      	ldr	r2, [pc, #692]	; (8002a90 <UART_SetConfig+0x334>)
 80027da:	4013      	ands	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4aa9      	ldr	r2, [pc, #676]	; (8002a94 <UART_SetConfig+0x338>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d136      	bne.n	8002860 <UART_SetConfig+0x104>
 80027f2:	4ba9      	ldr	r3, [pc, #676]	; (8002a98 <UART_SetConfig+0x33c>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	220c      	movs	r2, #12
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d020      	beq.n	8002840 <UART_SetConfig+0xe4>
 80027fe:	d827      	bhi.n	8002850 <UART_SetConfig+0xf4>
 8002800:	2b08      	cmp	r3, #8
 8002802:	d00d      	beq.n	8002820 <UART_SetConfig+0xc4>
 8002804:	d824      	bhi.n	8002850 <UART_SetConfig+0xf4>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <UART_SetConfig+0xb4>
 800280a:	2b04      	cmp	r3, #4
 800280c:	d010      	beq.n	8002830 <UART_SetConfig+0xd4>
 800280e:	e01f      	b.n	8002850 <UART_SetConfig+0xf4>
 8002810:	231b      	movs	r3, #27
 8002812:	2218      	movs	r2, #24
 8002814:	4694      	mov	ip, r2
 8002816:	44bc      	add	ip, r7
 8002818:	4463      	add	r3, ip
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e06f      	b.n	8002900 <UART_SetConfig+0x1a4>
 8002820:	231b      	movs	r3, #27
 8002822:	2218      	movs	r2, #24
 8002824:	4694      	mov	ip, r2
 8002826:	44bc      	add	ip, r7
 8002828:	4463      	add	r3, ip
 800282a:	2202      	movs	r2, #2
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e067      	b.n	8002900 <UART_SetConfig+0x1a4>
 8002830:	231b      	movs	r3, #27
 8002832:	2218      	movs	r2, #24
 8002834:	4694      	mov	ip, r2
 8002836:	44bc      	add	ip, r7
 8002838:	4463      	add	r3, ip
 800283a:	2204      	movs	r2, #4
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e05f      	b.n	8002900 <UART_SetConfig+0x1a4>
 8002840:	231b      	movs	r3, #27
 8002842:	2218      	movs	r2, #24
 8002844:	4694      	mov	ip, r2
 8002846:	44bc      	add	ip, r7
 8002848:	4463      	add	r3, ip
 800284a:	2208      	movs	r2, #8
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e057      	b.n	8002900 <UART_SetConfig+0x1a4>
 8002850:	231b      	movs	r3, #27
 8002852:	2218      	movs	r2, #24
 8002854:	4694      	mov	ip, r2
 8002856:	44bc      	add	ip, r7
 8002858:	4463      	add	r3, ip
 800285a:	2210      	movs	r2, #16
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e04f      	b.n	8002900 <UART_SetConfig+0x1a4>
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a89      	ldr	r2, [pc, #548]	; (8002a8c <UART_SetConfig+0x330>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d143      	bne.n	80028f2 <UART_SetConfig+0x196>
 800286a:	4b8b      	ldr	r3, [pc, #556]	; (8002a98 <UART_SetConfig+0x33c>)
 800286c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800286e:	23c0      	movs	r3, #192	; 0xc0
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	4013      	ands	r3, r2
 8002874:	22c0      	movs	r2, #192	; 0xc0
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	4293      	cmp	r3, r2
 800287a:	d02a      	beq.n	80028d2 <UART_SetConfig+0x176>
 800287c:	22c0      	movs	r2, #192	; 0xc0
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	4293      	cmp	r3, r2
 8002882:	d82e      	bhi.n	80028e2 <UART_SetConfig+0x186>
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	4293      	cmp	r3, r2
 800288a:	d012      	beq.n	80028b2 <UART_SetConfig+0x156>
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	4293      	cmp	r3, r2
 8002892:	d826      	bhi.n	80028e2 <UART_SetConfig+0x186>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <UART_SetConfig+0x146>
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	00d2      	lsls	r2, r2, #3
 800289c:	4293      	cmp	r3, r2
 800289e:	d010      	beq.n	80028c2 <UART_SetConfig+0x166>
 80028a0:	e01f      	b.n	80028e2 <UART_SetConfig+0x186>
 80028a2:	231b      	movs	r3, #27
 80028a4:	2218      	movs	r2, #24
 80028a6:	4694      	mov	ip, r2
 80028a8:	44bc      	add	ip, r7
 80028aa:	4463      	add	r3, ip
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e026      	b.n	8002900 <UART_SetConfig+0x1a4>
 80028b2:	231b      	movs	r3, #27
 80028b4:	2218      	movs	r2, #24
 80028b6:	4694      	mov	ip, r2
 80028b8:	44bc      	add	ip, r7
 80028ba:	4463      	add	r3, ip
 80028bc:	2202      	movs	r2, #2
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e01e      	b.n	8002900 <UART_SetConfig+0x1a4>
 80028c2:	231b      	movs	r3, #27
 80028c4:	2218      	movs	r2, #24
 80028c6:	4694      	mov	ip, r2
 80028c8:	44bc      	add	ip, r7
 80028ca:	4463      	add	r3, ip
 80028cc:	2204      	movs	r2, #4
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e016      	b.n	8002900 <UART_SetConfig+0x1a4>
 80028d2:	231b      	movs	r3, #27
 80028d4:	2218      	movs	r2, #24
 80028d6:	4694      	mov	ip, r2
 80028d8:	44bc      	add	ip, r7
 80028da:	4463      	add	r3, ip
 80028dc:	2208      	movs	r2, #8
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e00e      	b.n	8002900 <UART_SetConfig+0x1a4>
 80028e2:	231b      	movs	r3, #27
 80028e4:	2218      	movs	r2, #24
 80028e6:	4694      	mov	ip, r2
 80028e8:	44bc      	add	ip, r7
 80028ea:	4463      	add	r3, ip
 80028ec:	2210      	movs	r2, #16
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e006      	b.n	8002900 <UART_SetConfig+0x1a4>
 80028f2:	231b      	movs	r3, #27
 80028f4:	2218      	movs	r2, #24
 80028f6:	4694      	mov	ip, r2
 80028f8:	44bc      	add	ip, r7
 80028fa:	4463      	add	r3, ip
 80028fc:	2210      	movs	r2, #16
 80028fe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <UART_SetConfig+0x330>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d000      	beq.n	800290c <UART_SetConfig+0x1b0>
 800290a:	e088      	b.n	8002a1e <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800290c:	231b      	movs	r3, #27
 800290e:	2218      	movs	r2, #24
 8002910:	4694      	mov	ip, r2
 8002912:	44bc      	add	ip, r7
 8002914:	4463      	add	r3, ip
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d01d      	beq.n	8002958 <UART_SetConfig+0x1fc>
 800291c:	dc20      	bgt.n	8002960 <UART_SetConfig+0x204>
 800291e:	2b04      	cmp	r3, #4
 8002920:	d015      	beq.n	800294e <UART_SetConfig+0x1f2>
 8002922:	dc1d      	bgt.n	8002960 <UART_SetConfig+0x204>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <UART_SetConfig+0x1d2>
 8002928:	2b02      	cmp	r3, #2
 800292a:	d005      	beq.n	8002938 <UART_SetConfig+0x1dc>
 800292c:	e018      	b.n	8002960 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800292e:	f7ff fce5 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 8002932:	0003      	movs	r3, r0
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002936:	e01d      	b.n	8002974 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002938:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <UART_SetConfig+0x33c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2210      	movs	r2, #16
 800293e:	4013      	ands	r3, r2
 8002940:	d002      	beq.n	8002948 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002942:	4b56      	ldr	r3, [pc, #344]	; (8002a9c <UART_SetConfig+0x340>)
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002946:	e015      	b.n	8002974 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8002948:	4b55      	ldr	r3, [pc, #340]	; (8002aa0 <UART_SetConfig+0x344>)
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800294c:	e012      	b.n	8002974 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800294e:	f7ff fc27 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8002952:	0003      	movs	r3, r0
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002956:	e00d      	b.n	8002974 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800295e:	e009      	b.n	8002974 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002964:	231a      	movs	r3, #26
 8002966:	2218      	movs	r2, #24
 8002968:	4694      	mov	ip, r2
 800296a:	44bc      	add	ip, r7
 800296c:	4463      	add	r3, ip
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
        break;
 8002972:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d100      	bne.n	800297c <UART_SetConfig+0x220>
 800297a:	e139      	b.n	8002bf0 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	0013      	movs	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	189b      	adds	r3, r3, r2
 8002986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002988:	429a      	cmp	r2, r3
 800298a:	d305      	bcc.n	8002998 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002994:	429a      	cmp	r2, r3
 8002996:	d907      	bls.n	80029a8 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8002998:	231a      	movs	r3, #26
 800299a:	2218      	movs	r2, #24
 800299c:	4694      	mov	ip, r2
 800299e:	44bc      	add	ip, r7
 80029a0:	4463      	add	r3, ip
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e123      	b.n	8002bf0 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	6939      	ldr	r1, [r7, #16]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	000b      	movs	r3, r1
 80029b6:	0e1b      	lsrs	r3, r3, #24
 80029b8:	0010      	movs	r0, r2
 80029ba:	0205      	lsls	r5, r0, #8
 80029bc:	431d      	orrs	r5, r3
 80029be:	000b      	movs	r3, r1
 80029c0:	021c      	lsls	r4, r3, #8
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68b8      	ldr	r0, [r7, #8]
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	1900      	adds	r0, r0, r4
 80029d4:	4169      	adcs	r1, r5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f7fd fc1c 	bl	8000220 <__aeabi_uldivmod>
 80029e8:	0002      	movs	r2, r0
 80029ea:	000b      	movs	r3, r1
 80029ec:	0013      	movs	r3, r2
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f2:	23c0      	movs	r3, #192	; 0xc0
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d309      	bcc.n	8002a0e <UART_SetConfig+0x2b2>
 80029fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	035b      	lsls	r3, r3, #13
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d204      	bcs.n	8002a0e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	e0f0      	b.n	8002bf0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002a0e:	231a      	movs	r3, #26
 8002a10:	2218      	movs	r2, #24
 8002a12:	4694      	mov	ip, r2
 8002a14:	44bc      	add	ip, r7
 8002a16:	4463      	add	r3, ip
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e0e8      	b.n	8002bf0 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	021b      	lsls	r3, r3, #8
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d000      	beq.n	8002a2c <UART_SetConfig+0x2d0>
 8002a2a:	e087      	b.n	8002b3c <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002a2c:	231b      	movs	r3, #27
 8002a2e:	2218      	movs	r2, #24
 8002a30:	4694      	mov	ip, r2
 8002a32:	44bc      	add	ip, r7
 8002a34:	4463      	add	r3, ip
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d835      	bhi.n	8002aa8 <UART_SetConfig+0x34c>
 8002a3c:	009a      	lsls	r2, r3, #2
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <UART_SetConfig+0x348>)
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a46:	f7ff fc59 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a4e:	e035      	b.n	8002abc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a50:	f7ff fc6a 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 8002a54:	0003      	movs	r3, r0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a58:	e030      	b.n	8002abc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <UART_SetConfig+0x33c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2210      	movs	r2, #16
 8002a60:	4013      	ands	r3, r2
 8002a62:	d002      	beq.n	8002a6a <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <UART_SetConfig+0x340>)
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a68:	e028      	b.n	8002abc <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <UART_SetConfig+0x344>)
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a6e:	e025      	b.n	8002abc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a70:	f7ff fb96 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8002a74:	0003      	movs	r3, r0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a78:	e020      	b.n	8002abc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a80:	e01c      	b.n	8002abc <UART_SetConfig+0x360>
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	efff69f3 	.word	0xefff69f3
 8002a88:	ffffcfff 	.word	0xffffcfff
 8002a8c:	40004800 	.word	0x40004800
 8002a90:	fffff4ff 	.word	0xfffff4ff
 8002a94:	40004400 	.word	0x40004400
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	003d0900 	.word	0x003d0900
 8002aa0:	00f42400 	.word	0x00f42400
 8002aa4:	08003034 	.word	0x08003034
      default:
        pclk = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002aac:	231a      	movs	r3, #26
 8002aae:	2218      	movs	r2, #24
 8002ab0:	4694      	mov	ip, r2
 8002ab2:	44bc      	add	ip, r7
 8002ab4:	4463      	add	r3, ip
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
        break;
 8002aba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d100      	bne.n	8002ac4 <UART_SetConfig+0x368>
 8002ac2:	e095      	b.n	8002bf0 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	005a      	lsls	r2, r3, #1
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	18d2      	adds	r2, r2, r3
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	0010      	movs	r0, r2
 8002ad8:	f7fd fb16 	bl	8000108 <__udivsi3>
 8002adc:	0003      	movs	r3, r0
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d921      	bls.n	8002b2c <UART_SetConfig+0x3d0>
 8002ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	025b      	lsls	r3, r3, #9
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d21c      	bcs.n	8002b2c <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	200e      	movs	r0, #14
 8002af8:	2418      	movs	r4, #24
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	181b      	adds	r3, r3, r0
 8002afe:	210f      	movs	r1, #15
 8002b00:	438a      	bics	r2, r1
 8002b02:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b299      	uxth	r1, r3
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	181b      	adds	r3, r3, r0
 8002b14:	193a      	adds	r2, r7, r4
 8002b16:	1812      	adds	r2, r2, r0
 8002b18:	8812      	ldrh	r2, [r2, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	193a      	adds	r2, r7, r4
 8002b24:	1812      	adds	r2, r2, r0
 8002b26:	8812      	ldrh	r2, [r2, #0]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	e061      	b.n	8002bf0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002b2c:	231a      	movs	r3, #26
 8002b2e:	2218      	movs	r2, #24
 8002b30:	4694      	mov	ip, r2
 8002b32:	44bc      	add	ip, r7
 8002b34:	4463      	add	r3, ip
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e059      	b.n	8002bf0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b3c:	231b      	movs	r3, #27
 8002b3e:	2218      	movs	r2, #24
 8002b40:	4694      	mov	ip, r2
 8002b42:	44bc      	add	ip, r7
 8002b44:	4463      	add	r3, ip
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d822      	bhi.n	8002b92 <UART_SetConfig+0x436>
 8002b4c:	009a      	lsls	r2, r3, #2
 8002b4e:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <UART_SetConfig+0x4b4>)
 8002b50:	18d3      	adds	r3, r2, r3
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b56:	f7ff fbd1 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b5e:	e022      	b.n	8002ba6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7ff fbe2 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 8002b64:	0003      	movs	r3, r0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b68:	e01d      	b.n	8002ba6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <UART_SetConfig+0x4b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2210      	movs	r2, #16
 8002b70:	4013      	ands	r3, r2
 8002b72:	d002      	beq.n	8002b7a <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <UART_SetConfig+0x4bc>)
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b78:	e015      	b.n	8002ba6 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <UART_SetConfig+0x4c0>)
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b7e:	e012      	b.n	8002ba6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b80:	f7ff fb0e 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8002b84:	0003      	movs	r3, r0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b88:	e00d      	b.n	8002ba6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b90:	e009      	b.n	8002ba6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b96:	231a      	movs	r3, #26
 8002b98:	2218      	movs	r2, #24
 8002b9a:	4694      	mov	ip, r2
 8002b9c:	44bc      	add	ip, r7
 8002b9e:	4463      	add	r3, ip
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
        break;
 8002ba4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d021      	beq.n	8002bf0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	085a      	lsrs	r2, r3, #1
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	18d2      	adds	r2, r2, r3
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	0019      	movs	r1, r3
 8002bbc:	0010      	movs	r0, r2
 8002bbe:	f7fd faa3 	bl	8000108 <__udivsi3>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	d909      	bls.n	8002be2 <UART_SetConfig+0x486>
 8002bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	025b      	lsls	r3, r3, #9
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d204      	bcs.n	8002be2 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	e006      	b.n	8002bf0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002be2:	231a      	movs	r3, #26
 8002be4:	2218      	movs	r2, #24
 8002be6:	4694      	mov	ip, r2
 8002be8:	44bc      	add	ip, r7
 8002bea:	4463      	add	r3, ip
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002bfc:	231a      	movs	r3, #26
 8002bfe:	2218      	movs	r2, #24
 8002c00:	4694      	mov	ip, r2
 8002c02:	44bc      	add	ip, r7
 8002c04:	4463      	add	r3, ip
 8002c06:	781b      	ldrb	r3, [r3, #0]
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b00e      	add	sp, #56	; 0x38
 8002c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c10:	08003058 	.word	0x08003058
 8002c14:	40021000 	.word	0x40021000
 8002c18:	003d0900 	.word	0x003d0900
 8002c1c:	00f42400 	.word	0x00f42400

08002c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a4a      	ldr	r2, [pc, #296]	; (8002d64 <UART_AdvFeatureConfig+0x144>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2202      	movs	r2, #2
 8002c50:	4013      	ands	r3, r2
 8002c52:	d00b      	beq.n	8002c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a43      	ldr	r2, [pc, #268]	; (8002d68 <UART_AdvFeatureConfig+0x148>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	2204      	movs	r2, #4
 8002c72:	4013      	ands	r3, r2
 8002c74:	d00b      	beq.n	8002c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a3b      	ldr	r2, [pc, #236]	; (8002d6c <UART_AdvFeatureConfig+0x14c>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2208      	movs	r2, #8
 8002c94:	4013      	ands	r3, r2
 8002c96:	d00b      	beq.n	8002cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a34      	ldr	r2, [pc, #208]	; (8002d70 <UART_AdvFeatureConfig+0x150>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a2c      	ldr	r2, [pc, #176]	; (8002d74 <UART_AdvFeatureConfig+0x154>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d00b      	beq.n	8002cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4a25      	ldr	r2, [pc, #148]	; (8002d78 <UART_AdvFeatureConfig+0x158>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2240      	movs	r2, #64	; 0x40
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d01d      	beq.n	8002d3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <UART_AdvFeatureConfig+0x15c>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	035b      	lsls	r3, r3, #13
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d10b      	bne.n	8002d3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <UART_AdvFeatureConfig+0x160>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	4013      	ands	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <UART_AdvFeatureConfig+0x164>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]
  }
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	fffdffff 	.word	0xfffdffff
 8002d68:	fffeffff 	.word	0xfffeffff
 8002d6c:	fffbffff 	.word	0xfffbffff
 8002d70:	ffff7fff 	.word	0xffff7fff
 8002d74:	ffffefff 	.word	0xffffefff
 8002d78:	ffffdfff 	.word	0xffffdfff
 8002d7c:	ffefffff 	.word	0xffefffff
 8002d80:	ff9fffff 	.word	0xff9fffff
 8002d84:	fff7ffff 	.word	0xfff7ffff

08002d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2280      	movs	r2, #128	; 0x80
 8002d94:	2100      	movs	r1, #0
 8002d96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d98:	f7fd ffac 	bl	8000cf4 <HAL_GetTick>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2208      	movs	r2, #8
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d10c      	bne.n	8002dc8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	0391      	lsls	r1, r2, #14
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <UART_CheckIdleState+0x8c>)
 8002db8:	9200      	str	r2, [sp, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f000 f82c 	bl	8002e18 <UART_WaitOnFlagUntilTimeout>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e021      	b.n	8002e0c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d10c      	bne.n	8002df0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	03d1      	lsls	r1, r2, #15
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <UART_CheckIdleState+0x8c>)
 8002de0:	9200      	str	r2, [sp, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f000 f818 	bl	8002e18 <UART_WaitOnFlagUntilTimeout>
 8002de8:	1e03      	subs	r3, r0, #0
 8002dea:	d001      	beq.n	8002df0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e00d      	b.n	8002e0c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2274      	movs	r2, #116	; 0x74
 8002e06:	2100      	movs	r1, #0
 8002e08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b004      	add	sp, #16
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	01ffffff 	.word	0x01ffffff

08002e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b094      	sub	sp, #80	; 0x50
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	1dfb      	adds	r3, r7, #7
 8002e26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e28:	e0a3      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	d100      	bne.n	8002e32 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002e30:	e09f      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fd ff5f 	bl	8000cf4 <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d13d      	bne.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e48:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e50:	647b      	str	r3, [r7, #68]	; 0x44
 8002e52:	2301      	movs	r3, #1
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	f383 8810 	msr	PRIMASK, r3
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	494c      	ldr	r1, [pc, #304]	; (8002f9c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	f383 8810 	msr	PRIMASK, r3
}
 8002e78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	643b      	str	r3, [r7, #64]	; 0x40
 8002e84:	2301      	movs	r3, #1
 8002e86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	f383 8810 	msr	PRIMASK, r3
}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea6:	f383 8810 	msr	PRIMASK, r3
}
 8002eaa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2274      	movs	r2, #116	; 0x74
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e067      	b.n	8002f94 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d050      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	401a      	ands	r2, r3
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d146      	bne.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eee:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef2:	613b      	str	r3, [r7, #16]
  return(result);
 8002ef4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef8:	2301      	movs	r3, #1
 8002efa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f383 8810 	msr	PRIMASK, r3
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4923      	ldr	r1, [pc, #140]	; (8002f9c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f383 8810 	msr	PRIMASK, r3
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f20:	f3ef 8310 	mrs	r3, PRIMASK
 8002f24:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f26:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f28:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f383 8810 	msr	PRIMASK, r3
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2101      	movs	r1, #1
 8002f42:	438a      	bics	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	f383 8810 	msr	PRIMASK, r3
}
 8002f50:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	2120      	movs	r1, #32
 8002f64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2274      	movs	r2, #116	; 0x74
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e010      	b.n	8002f94 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	425a      	negs	r2, r3
 8002f82:	4153      	adcs	r3, r2
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	001a      	movs	r2, r3
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d100      	bne.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002f90:	e74b      	b.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b014      	add	sp, #80	; 0x50
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	fffffe5f 	.word	0xfffffe5f

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	4d0c      	ldr	r5, [pc, #48]	; (8002fd8 <__libc_init_array+0x38>)
 8002fa6:	4c0d      	ldr	r4, [pc, #52]	; (8002fdc <__libc_init_array+0x3c>)
 8002fa8:	1b64      	subs	r4, r4, r5
 8002faa:	10a4      	asrs	r4, r4, #2
 8002fac:	42a6      	cmp	r6, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	f000 f821 	bl	8002ff8 <_init>
 8002fb6:	4d0a      	ldr	r5, [pc, #40]	; (8002fe0 <__libc_init_array+0x40>)
 8002fb8:	4c0a      	ldr	r4, [pc, #40]	; (8002fe4 <__libc_init_array+0x44>)
 8002fba:	1b64      	subs	r4, r4, r5
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	42a6      	cmp	r6, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	00b3      	lsls	r3, r6, #2
 8002fc6:	58eb      	ldr	r3, [r5, r3]
 8002fc8:	4798      	blx	r3
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	00b3      	lsls	r3, r6, #2
 8002fd0:	58eb      	ldr	r3, [r5, r3]
 8002fd2:	4798      	blx	r3
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003084 	.word	0x08003084
 8002fdc:	08003084 	.word	0x08003084
 8002fe0:	08003084 	.word	0x08003084
 8002fe4:	08003088 	.word	0x08003088

08002fe8 <memset>:
 8002fe8:	0003      	movs	r3, r0
 8002fea:	1882      	adds	r2, r0, r2
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	7019      	strb	r1, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
